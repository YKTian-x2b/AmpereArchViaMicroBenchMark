//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z27smem_ld_latency_test_kernelPjS_S_
// _ZZ27smem_ld_latency_test_kernelPjS_S_E3Arr has been demoted
// _ZZ27smem_st_latency_test_kernelPjS_S_E3Arr has been demoted

.visible .entry _Z27smem_ld_latency_test_kernelPjS_S_(
	.param .u64 _Z27smem_ld_latency_test_kernelPjS_S__param_0,
	.param .u64 _Z27smem_ld_latency_test_kernelPjS_S__param_1,
	.param .u64 _Z27smem_ld_latency_test_kernelPjS_S__param_2
)
.maxntid 32, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<109>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ27smem_ld_latency_test_kernelPjS_S_E3Arr[128];

	ld.param.u64 	%rd3, [_Z27smem_ld_latency_test_kernelPjS_S__param_0];
	ld.param.u64 	%rd4, [_Z27smem_ld_latency_test_kernelPjS_S__param_1];
	ld.param.u64 	%rd1, [_Z27smem_ld_latency_test_kernelPjS_S__param_2];
	mov.u32 	%r104, %tid.x;
	shl.b32 	%r105, %r104, 2;
	mov.u32 	%r106, _ZZ27smem_ld_latency_test_kernelPjS_S_E3Arr;
	add.s32 	%r107, %r106, %r105;
	st.shared.u32 	[%r107], %r105;
	mul.wide.s32 	%rd5, %r104, 4;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r106;
	  cvta.shared.u64 	%rd6, %tmp; }
	add.s64 	%rd2, %rd6, %rd5;
	// begin inline asm
	{.reg .u64 u64addr;
 cvta.to.shared.u64 u64addr, %rd2;
 cvt.u32.u64 %r5, u64addr;}

	// end inline asm
	// begin inline asm
	bar.sync 0;
	// end inline asm
	// begin inline asm
	mov.u32 %r2, %clock;
	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	mov.u32 %r103, %clock;
	// end inline asm
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd8, %rd7, %rd5;
	cvta.to.global.u64 	%rd9, %rd4;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.u32 	[%rd8], %r2;
	st.global.u32 	[%rd10], %r103;
	setp.ne.s32 	%p1, %r5, -1;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd11, %rd1;
	mov.u32 	%r108, -1;
	st.global.u32 	[%rd11], %r108;

$L__BB0_2:
	ret;

}
	// .globl	_Z27smem_st_latency_test_kernelPjS_S_
.visible .entry _Z27smem_st_latency_test_kernelPjS_S_(
	.param .u64 _Z27smem_st_latency_test_kernelPjS_S__param_0,
	.param .u64 _Z27smem_st_latency_test_kernelPjS_S__param_1,
	.param .u64 _Z27smem_st_latency_test_kernelPjS_S__param_2
)
.maxntid 32, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ27smem_st_latency_test_kernelPjS_S_E3Arr[328];

	ld.param.u64 	%rd3, [_Z27smem_st_latency_test_kernelPjS_S__param_0];
	ld.param.u64 	%rd4, [_Z27smem_st_latency_test_kernelPjS_S__param_1];
	ld.param.u64 	%rd1, [_Z27smem_st_latency_test_kernelPjS_S__param_2];
	cvta.to.global.u64 	%rd5, %rd4;
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r7, %r5, 2;
	mov.u32 	%r8, _ZZ27smem_st_latency_test_kernelPjS_S_E3Arr;
	add.s32 	%r1, %r8, %r7;
	st.shared.u32 	[%r1], %r7;
	mul.wide.s32 	%rd6, %r5, 4;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r8;
	  cvta.shared.u64 	%rd7, %tmp; }
	add.s64 	%rd2, %rd7, %rd6;
	// begin inline asm
	{.reg .u64 u64addr;
 cvta.to.shared.u64 u64addr, %rd2;
 cvt.u32.u64 %r2, u64addr;}

	// end inline asm
	// begin inline asm
	bar.sync 0;
	// end inline asm
	// begin inline asm
	mov.u32 %r3, %clock;
	// end inline asm
	// begin inline asm
	st.shared.b32 [%r4], %r5;

	// end inline asm
	st.shared.u32 	[%r1], %r5;
	st.shared.u32 	[%r1+4], %r5;
	st.shared.u32 	[%r1+8], %r5;
	// begin inline asm
	mov.u32 %r6, %clock;
	// end inline asm
	cvta.to.global.u64 	%rd8, %rd3;
	add.s64 	%rd9, %rd8, %rd6;
	add.s64 	%rd10, %rd5, %rd6;
	st.global.u32 	[%rd9], %r3;
	st.global.u32 	[%rd10], %r6;
	setp.ne.s32 	%p1, %r4, -1;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd11, %rd1;
	ld.shared.u32 	%r9, [%r1];
	st.global.u32 	[%rd11], %r9;

$L__BB1_2:
	ret;

}


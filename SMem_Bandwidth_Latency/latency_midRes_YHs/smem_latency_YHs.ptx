//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z19smem_latency_kernelPKjPjS1_
// _ZZ19smem_latency_kernelPKjPjS1_E4smem has been demoted

.visible .entry _Z19smem_latency_kernelPKjPjS1_(
	.param .u64 _Z19smem_latency_kernelPKjPjS1__param_0,
	.param .u64 _Z19smem_latency_kernelPKjPjS1__param_1,
	.param .u64 _Z19smem_latency_kernelPKjPjS1__param_2
)
.maxntid 16, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<111>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ19smem_latency_kernelPKjPjS1_E4smem[64];

	ld.param.u64 	%rd3, [_Z19smem_latency_kernelPKjPjS1__param_0];
	ld.param.u64 	%rd1, [_Z19smem_latency_kernelPKjPjS1__param_1];
	ld.param.u64 	%rd4, [_Z19smem_latency_kernelPKjPjS1__param_2];
	cvta.to.global.u64 	%rd5, %rd3;
	mov.u32 	%r104, %tid.x;
	mul.wide.u32 	%rd6, %r104, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u32 	%r105, [%rd7];
	shl.b32 	%r106, %r104, 2;
	mov.u32 	%r107, _ZZ19smem_latency_kernelPKjPjS1_E4smem;
	add.s32 	%r108, %r107, %r106;
	st.shared.u32 	[%r108], %r105;
	{ .reg .b64 %tmp;
	  cvt.u64.u32 	%tmp, %r107;
	  cvta.shared.u64 	%rd8, %tmp; }
	add.s64 	%rd2, %rd8, %rd6;
	// begin inline asm
	{.reg .u64 u64addr;
 cvta.to.shared.u64 u64addr, %rd2;
 cvt.u32.u64 %r5, u64addr;}

	// end inline asm
	// begin inline asm
	bar.sync 0;
mov.u32 %r2, %clock;

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	ld.shared.b32 %r5, [%r5];

	// end inline asm
	// begin inline asm
	bar.sync 0;
mov.u32 %r103, %clock;

	// end inline asm
	sub.s32 	%r109, %r103, %r2;
	cvta.to.global.u64 	%rd9, %rd4;
	add.s64 	%rd10, %rd9, %rd6;
	st.global.u32 	[%rd10], %r109;
	setp.ne.s32 	%p1, %r5, -1;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd11, %rd1;
	mov.u32 	%r110, -1;
	st.global.u32 	[%rd11], %r110;

$L__BB0_2:
	ret;

}


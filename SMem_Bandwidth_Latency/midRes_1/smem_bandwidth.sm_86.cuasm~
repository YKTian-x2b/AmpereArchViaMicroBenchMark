// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM86 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM86)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          121 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x1940 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x1680 		// section header offset, maybe updated by assembler
	.__elf_flags            0x560556 		// Flags, SM_86(0x56), COMPUTE_86(0x56) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            4 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            11 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x124 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x32, 0x34, 0x53, 0x4d, 0x65, 0x6d, 0x5f, 0x77
    /*0050*/ .byte 0x72, 0x69, 0x74, 0x65, 0x42, 0x57, 0x5f, 0x74
    /*0058*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*0060*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x50, 0x66
    /*0068*/ .byte 0x00

    // .shstrtab[8] = b'.nv.info._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0069*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0071*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x34, 0x53, 0x4d, 0x65
    /*0079*/ .byte 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42
    /*0081*/ .byte 0x57, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0089*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*0091*/ .byte 0x5f, 0x50, 0x66, 0x00

    // .shstrtab[9] = b'.nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0095*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*009d*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x34, 0x53
    /*00a5*/ .byte 0x4d, 0x65, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74
    /*00ad*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*00b5*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*00bd*/ .byte 0x6a, 0x53, 0x5f, 0x50, 0x66, 0x00

    // .shstrtab[10] = b'.nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*00c3*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00cb*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00d3*/ .byte 0x32, 0x34, 0x53, 0x4d, 0x65, 0x6d, 0x5f, 0x77
    /*00db*/ .byte 0x72, 0x69, 0x74, 0x65, 0x42, 0x57, 0x5f, 0x74
    /*00e3*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00eb*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x50, 0x66
    /*00f3*/ .byte 0x00

    // .shstrtab[11] = b'.debug_frame\x00' 
    /*00f4*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00fc*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[12] = b'.rel.debug_frame\x00' 
    /*0101*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0109*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*0111*/ .byte 0x00

    // .shstrtab[13] = b'.rela.debug_frame\x00' 
    /*0112*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*011a*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0122*/ .byte 0x65, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x164 	// maybe updated by assembler
	.__section_size         0x17e 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x32, 0x34, 0x53, 0x4d, 0x65, 0x6d
    /*0048*/ .byte 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x57
    /*0050*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65
    /*0058*/ .byte 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f
    /*0060*/ .byte 0x50, 0x66, 0x00

    // .strtab[8] = b'.text._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0063*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*006b*/ .byte 0x32, 0x34, 0x53, 0x4d, 0x65, 0x6d, 0x5f, 0x77
    /*0073*/ .byte 0x72, 0x69, 0x74, 0x65, 0x42, 0x57, 0x5f, 0x74
    /*007b*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*0083*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x50, 0x66
    /*008b*/ .byte 0x00

    // .strtab[9] = b'.nv.info._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*008c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0094*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x34, 0x53, 0x4d, 0x65
    /*009c*/ .byte 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42
    /*00a4*/ .byte 0x57, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*00ac*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*00b4*/ .byte 0x5f, 0x50, 0x66, 0x00

    // .strtab[10] = b'.nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*00b8*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00c0*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x34, 0x53
    /*00c8*/ .byte 0x4d, 0x65, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74
    /*00d0*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*00d8*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*00e0*/ .byte 0x6a, 0x53, 0x5f, 0x50, 0x66, 0x00

    // .strtab[11] = b'$___ZZ24SMem_writeBW_test_kernelPjS_PfE3Arr__27\x00' 
    /*00e6*/ .byte 0x24, 0x5f, 0x5f, 0x5f, 0x5a, 0x5a, 0x32, 0x34
    /*00ee*/ .byte 0x53, 0x4d, 0x65, 0x6d, 0x5f, 0x77, 0x72, 0x69
    /*00f6*/ .byte 0x74, 0x65, 0x42, 0x57, 0x5f, 0x74, 0x65, 0x73
    /*00fe*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*0106*/ .byte 0x50, 0x6a, 0x53, 0x5f, 0x50, 0x66, 0x45, 0x33
    /*010e*/ .byte 0x41, 0x72, 0x72, 0x5f, 0x5f, 0x32, 0x37, 0x00

    // .strtab[12] = b'.nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf\x00' 
    /*0116*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*011e*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0126*/ .byte 0x32, 0x34, 0x53, 0x4d, 0x65, 0x6d, 0x5f, 0x77
    /*012e*/ .byte 0x72, 0x69, 0x74, 0x65, 0x42, 0x57, 0x5f, 0x74
    /*0136*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*013e*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x50, 0x66
    /*0146*/ .byte 0x00

    // .strtab[13] = b'_param\x00' 
    /*0147*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[14] = b'.debug_frame\x00' 
    /*014e*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*0156*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[15] = b'.rel.debug_frame\x00' 
    /*015b*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0163*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*016b*/ .byte 0x00

    // .strtab[16] = b'.rela.debug_frame\x00' 
    /*016c*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*0174*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*017c*/ .byte 0x65, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2e8 	// maybe updated by assembler
	.__section_size         0x90 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x5
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z24SMem_writeBW_test_kernelPjS_Pf": Container({'st_name': 99, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x63, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf": Container({'st_name': 184, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xb8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf": Container({'st_name': 278, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 8, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0x16, 0x01, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".debug_frame": Container({'st_name': 334, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0x4e, 0x01, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] "_Z24SMem_writeBW_test_kernelPjS_Pf": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 4224})
    /*0078*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x09, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0xf4 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x378 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z24SMem_writeBW_test_kernelPjS_Pf
          /*004c*/ 	.byte	0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xec, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3e8 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z24SMem_writeBW_test_kernelPjS_Pf)
          /*0008*/ 	.word	0x0000001e
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z24SMem_writeBW_test_kernelPjS_Pf)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z24SMem_writeBW_test_kernelPjS_Pf)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z24SMem_writeBW_test_kernelPjS_Pf)
          /*002c*/ 	.word	0x00000000
  .L_7:
  
  
// --------------------- .nv.info._Z24SMem_writeBW_test_kernelPjS_Pf --------------------------
	.section	.nv.info._Z24SMem_writeBW_test_kernelPjS_Pf,"",@"SHT_CUDA_INFO"
	.__section_name         0x69 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x418 	// maybe updated by assembler
	.__section_size         0x60 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_9 - .L_8)
  .L_8:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_9:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0010*/ 	.word	index@(.nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_11:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_13 - .L_12)
  .L_12:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0002
          /*0026*/ 	.short	0x0010
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_13:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0001
          /*0036*/ 	.short	0x0008
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_15:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0000
          /*0046*/ 	.short	0x0000
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_17:
          /*004c*/ 	.byte	0x03, 0x1b
          /*004e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0050*/ 	.byte	0x04, 0x1c
          /*0052*/ 	.short	(.L_19 - .L_18)
  
  
  	//   ....[0]....
  .L_18:
          /*0054*/ 	.word	0x00000fd0
  
  
  	//----- nvinfo : EIATTR_CRS_STACK_SIZE
  	.align		4
  .L_19:
          /*0058*/ 	.byte	0x04, 0x1e
          /*005a*/ 	.short	(.L_21 - .L_20)
  .L_20:
          /*005c*/ 	.word	0x00000000
  .L_21:
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x101 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x478 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z24SMem_writeBW_test_kernelPjS_Pf, Container({'r_offset': 68, 'r_info': 21474836482, 'r_info_sym': 5, 'r_info_type': 2})

// --------------------- .nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf --------------------------
	.section	.nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf,"a",@progbits
	.__section_name         0xc3 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x488 	// maybe updated by assembler
	.__section_size         0x178 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf:
  	.zero		376
  
  
// --------------------- .text._Z24SMem_writeBW_test_kernelPjS_Pf --------------------------
	.section	.text._Z24SMem_writeBW_test_kernelPjS_Pf,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0x600 	// maybe updated by assembler
	.__section_size         0x1080 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x1e000005
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=30"
  	.align	128
          .global         _Z24SMem_writeBW_test_kernelPjS_Pf
          .type           _Z24SMem_writeBW_test_kernelPjS_Pf,@function
          .size           _Z24SMem_writeBW_test_kernelPjS_Pf,(.L_x_14 - _Z24SMem_writeBW_test_kernelPjS_Pf)
          .other          _Z24SMem_writeBW_test_kernelPjS_Pf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z24SMem_writeBW_test_kernelPjS_Pf:
  .text._Z24SMem_writeBW_test_kernelPjS_Pf:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W-:Y:S05]         /*0010*/                   CS2R.32 R0, SR_CLOCKLO ;
      [B------:R-:W0:-:S01]         /*0020*/                   S2R R4, SR_TID.X ;
      [B------:R-:W-:-:S01]         /*0030*/                   MOV R3, RZ ;
      [B0-----:R-:W-:Y:S05]         /*0040*/                   IMAD.SHL.U32 R6, R4, 0x4, RZ ;
      [B------:R-:W-:Y:S02]         /*0050*/                   IADD3 R2, R6, 0x800, RZ ;
  .L_x_0:
      [B------:R-:W-:-:S01]         /*0060*/                   IADD3 R3, R3, 0x1000, RZ ;
      [B------:R-:W-:Y:S03]         /*0070*/                   IMAD.MOV.U32 R5, RZ, RZ, 0x3f800000 ;
      [B------:R-:W-:-:S02]         /*0080*/                   ISETP.GE.U32.AND P0, PT, R3, 0x2000, PT ;
      [B------:R-:W-:-:S04]         /*0090*/                   STS [R2+-0x800], R5 ;
      [B------:R-:W-:-:S04]         /*00a0*/                   STS [R2+-0x780], R5 ;
      [B------:R-:W-:-:S04]         /*00b0*/                   STS [R2+-0x700], R5 ;
      [B------:R-:W-:-:S04]         /*00c0*/                   STS [R2+-0x680], R5 ;
      [B------:R-:W-:-:S04]         /*00d0*/                   STS [R2+-0x600], R5 ;
      [B------:R-:W-:-:S04]         /*00e0*/                   STS [R2+-0x580], R5 ;
      [B------:R-:W-:-:S04]         /*00f0*/                   STS [R2+-0x500], R5 ;
      [B------:R-:W-:-:S04]         /*0100*/                   STS [R2+-0x480], R5 ;
      [B------:R-:W-:-:S04]         /*0110*/                   STS [R2+-0x400], R5 ;
      [B------:R-:W-:-:S04]         /*0120*/                   STS [R2+-0x380], R5 ;
      [B------:R-:W-:-:S04]         /*0130*/                   STS [R2+-0x300], R5 ;
      [B------:R-:W-:-:S04]         /*0140*/                   STS [R2+-0x280], R5 ;
      [B------:R-:W-:-:S04]         /*0150*/                   STS [R2+-0x200], R5 ;
      [B------:R-:W-:-:S04]         /*0160*/                   STS [R2+-0x180], R5 ;
      [B------:R-:W-:-:S04]         /*0170*/                   STS [R2+-0x100], R5 ;
      [B------:R-:W-:-:S04]         /*0180*/                   STS [R2+-0x80], R5 ;
      [B------:R-:W-:-:S04]         /*0190*/                   STS [R2], R5 ;
      [B------:R-:W-:-:S04]         /*01a0*/                   STS [R2+0x80], R5 ;
      [B------:R-:W-:-:S04]         /*01b0*/                   STS [R2+0x100], R5 ;
      [B------:R-:W-:-:S04]         /*01c0*/                   STS [R2+0x180], R5 ;
      [B------:R-:W-:-:S04]         /*01d0*/                   STS [R2+0x200], R5 ;
      [B------:R-:W-:-:S04]         /*01e0*/                   STS [R2+0x280], R5 ;
      [B------:R-:W-:-:S04]         /*01f0*/                   STS [R2+0x300], R5 ;
      [B------:R-:W-:-:S04]         /*0200*/                   STS [R2+0x380], R5 ;
      [B------:R-:W-:-:S04]         /*0210*/                   STS [R2+0x400], R5 ;
      [B------:R-:W-:-:S04]         /*0220*/                   STS [R2+0x480], R5 ;
      [B------:R-:W-:-:S04]         /*0230*/                   STS [R2+0x500], R5 ;
      [B------:R-:W-:-:S04]         /*0240*/                   STS [R2+0x580], R5 ;
      [B------:R-:W-:-:S04]         /*0250*/                   STS [R2+0x600], R5 ;
      [B------:R-:W-:-:S04]         /*0260*/                   STS [R2+0x680], R5 ;
      [B------:R-:W-:-:S04]         /*0270*/                   STS [R2+0x700], R5 ;
      [B------:R-:W-:-:S04]         /*0280*/                   STS [R2+0x780], R5 ;
      [B------:R-:W-:-:S04]         /*0290*/                   STS [R2+0x800], R5 ;
      [B------:R-:W-:-:S04]         /*02a0*/                   STS [R2+0x880], R5 ;
      [B------:R-:W-:-:S04]         /*02b0*/                   STS [R2+0x900], R5 ;
      [B------:R-:W-:-:S04]         /*02c0*/                   STS [R2+0x980], R5 ;
      [B------:R-:W-:-:S04]         /*02d0*/                   STS [R2+0xa00], R5 ;
      [B------:R-:W-:-:S04]         /*02e0*/                   STS [R2+0xa80], R5 ;
      [B------:R-:W-:-:S04]         /*02f0*/                   STS [R2+0xb00], R5 ;
      [B------:R-:W-:-:S04]         /*0300*/                   STS [R2+0xb80], R5 ;
      [B------:R-:W-:-:S04]         /*0310*/                   STS [R2+0xc00], R5 ;
      [B------:R-:W-:-:S04]         /*0320*/                   STS [R2+0xc80], R5 ;
      [B------:R-:W-:-:S04]         /*0330*/                   STS [R2+0xd00], R5 ;
      [B------:R-:W-:-:S04]         /*0340*/                   STS [R2+0xd80], R5 ;
      [B------:R-:W-:-:S04]         /*0350*/                   STS [R2+0xe00], R5 ;
      [B------:R-:W-:-:S04]         /*0360*/                   STS [R2+0xe80], R5 ;
      [B------:R-:W-:-:S04]         /*0370*/                   STS [R2+0xf00], R5 ;
      [B------:R-:W-:-:S04]         /*0380*/                   STS [R2+0xf80], R5 ;
      [B------:R-:W-:-:S04]         /*0390*/                   STS [R2+0x1000], R5 ;
      [B------:R-:W-:-:S04]         /*03a0*/                   STS [R2+0x1080], R5 ;
      [B------:R-:W-:-:S04]         /*03b0*/                   STS [R2+0x1100], R5 ;
      [B------:R-:W-:-:S04]         /*03c0*/                   STS [R2+0x1180], R5 ;
      [B------:R-:W-:-:S04]         /*03d0*/                   STS [R2+0x1200], R5 ;
      [B------:R-:W-:-:S04]         /*03e0*/                   STS [R2+0x1280], R5 ;
      [B------:R-:W-:-:S04]         /*03f0*/                   STS [R2+0x1300], R5 ;
      [B------:R-:W-:-:S04]         /*0400*/                   STS [R2+0x1380], R5 ;
      [B------:R-:W-:-:S04]         /*0410*/                   STS [R2+0x1400], R5 ;
      [B------:R-:W-:-:S04]         /*0420*/                   STS [R2+0x1480], R5 ;
      [B------:R-:W-:-:S04]         /*0430*/                   STS [R2+0x1500], R5 ;
      [B------:R-:W-:-:S04]         /*0440*/                   STS [R2+0x1580], R5 ;
      [B------:R-:W-:-:S04]         /*0450*/                   STS [R2+0x1600], R5 ;
      [B------:R-:W-:-:S04]         /*0460*/                   STS [R2+0x1680], R5 ;
      [B------:R-:W-:-:S04]         /*0470*/                   STS [R2+0x1700], R5 ;
      [B------:R-:W-:-:S04]         /*0480*/                   STS [R2+0x1780], R5 ;
      [B------:R-:W-:-:S04]         /*0490*/                   STS [R2+0x1800], R5 ;
      [B------:R-:W-:-:S04]         /*04a0*/                   STS [R2+0x1880], R5 ;
      [B------:R-:W-:-:S04]         /*04b0*/                   STS [R2+0x1900], R5 ;
      [B------:R-:W-:-:S04]         /*04c0*/                   STS [R2+0x1980], R5 ;
      [B------:R-:W-:-:S04]         /*04d0*/                   STS [R2+0x1a00], R5 ;
      [B------:R-:W-:-:S04]         /*04e0*/                   STS [R2+0x1a80], R5 ;
      [B------:R-:W-:-:S04]         /*04f0*/                   STS [R2+0x1b00], R5 ;
      [B------:R-:W-:-:S04]         /*0500*/                   STS [R2+0x1b80], R5 ;
      [B------:R-:W-:-:S04]         /*0510*/                   STS [R2+0x1c00], R5 ;
      [B------:R-:W-:-:S04]         /*0520*/                   STS [R2+0x1c80], R5 ;
      [B------:R-:W-:-:S04]         /*0530*/                   STS [R2+0x1d00], R5 ;
      [B------:R-:W-:-:S04]         /*0540*/                   STS [R2+0x1d80], R5 ;
      [B------:R-:W-:-:S04]         /*0550*/                   STS [R2+0x1e00], R5 ;
      [B------:R-:W-:-:S04]         /*0560*/                   STS [R2+0x1e80], R5 ;
      [B------:R-:W-:-:S04]         /*0570*/                   STS [R2+0x1f00], R5 ;
      [B------:R-:W-:-:S04]         /*0580*/                   STS [R2+0x1f80], R5 ;
      [B------:R-:W-:-:S04]         /*0590*/                   STS [R2+0x2000], R5 ;
      [B------:R-:W-:-:S04]         /*05a0*/                   STS [R2+0x2080], R5 ;
      [B------:R-:W-:-:S04]         /*05b0*/                   STS [R2+0x2100], R5 ;
      [B------:R-:W-:-:S04]         /*05c0*/                   STS [R2+0x2180], R5 ;
      [B------:R-:W-:-:S04]         /*05d0*/                   STS [R2+0x2200], R5 ;
      [B------:R-:W-:-:S04]         /*05e0*/                   STS [R2+0x2280], R5 ;
      [B------:R-:W-:-:S04]         /*05f0*/                   STS [R2+0x2300], R5 ;
      [B------:R-:W-:-:S04]         /*0600*/                   STS [R2+0x2380], R5 ;
      [B------:R-:W-:-:S04]         /*0610*/                   STS [R2+0x2400], R5 ;
      [B------:R-:W-:-:S04]         /*0620*/                   STS [R2+0x2480], R5 ;
      [B------:R-:W-:-:S04]         /*0630*/                   STS [R2+0x2500], R5 ;
      [B------:R-:W-:-:S04]         /*0640*/                   STS [R2+0x2580], R5 ;
      [B------:R-:W-:-:S04]         /*0650*/                   STS [R2+0x2600], R5 ;
      [B------:R-:W-:-:S04]         /*0660*/                   STS [R2+0x2680], R5 ;
      [B------:R-:W-:-:S04]         /*0670*/                   STS [R2+0x2700], R5 ;
      [B------:R-:W-:-:S04]         /*0680*/                   STS [R2+0x2780], R5 ;
      [B------:R-:W-:-:S04]         /*0690*/                   STS [R2+0x2800], R5 ;
      [B------:R-:W-:-:S04]         /*06a0*/                   STS [R2+0x2880], R5 ;
      [B------:R-:W-:-:S04]         /*06b0*/                   STS [R2+0x2900], R5 ;
      [B------:R-:W-:-:S04]         /*06c0*/                   STS [R2+0x2980], R5 ;
      [B------:R-:W-:-:S04]         /*06d0*/                   STS [R2+0x2a00], R5 ;
      [B------:R-:W-:-:S04]         /*06e0*/                   STS [R2+0x2a80], R5 ;
      [B------:R-:W-:-:S04]         /*06f0*/                   STS [R2+0x2b00], R5 ;
      [B------:R-:W-:-:S04]         /*0700*/                   STS [R2+0x2b80], R5 ;
      [B------:R-:W-:-:S04]         /*0710*/                   STS [R2+0x2c00], R5 ;
      [B------:R-:W-:-:S04]         /*0720*/                   STS [R2+0x2c80], R5 ;
      [B------:R-:W-:-:S04]         /*0730*/                   STS [R2+0x2d00], R5 ;
      [B------:R-:W-:-:S04]         /*0740*/                   STS [R2+0x2d80], R5 ;
      [B------:R-:W-:-:S04]         /*0750*/                   STS [R2+0x2e00], R5 ;
      [B------:R-:W-:-:S04]         /*0760*/                   STS [R2+0x2e80], R5 ;
      [B------:R-:W-:-:S04]         /*0770*/                   STS [R2+0x2f00], R5 ;
      [B------:R-:W-:-:S04]         /*0780*/                   STS [R2+0x2f80], R5 ;
      [B------:R-:W-:-:S04]         /*0790*/                   STS [R2+0x3000], R5 ;
      [B------:R-:W-:-:S04]         /*07a0*/                   STS [R2+0x3080], R5 ;
      [B------:R-:W-:-:S04]         /*07b0*/                   STS [R2+0x3100], R5 ;
      [B------:R-:W-:-:S04]         /*07c0*/                   STS [R2+0x3180], R5 ;
      [B------:R-:W-:-:S04]         /*07d0*/                   STS [R2+0x3200], R5 ;
      [B------:R-:W-:-:S04]         /*07e0*/                   STS [R2+0x3280], R5 ;
      [B------:R-:W-:-:S04]         /*07f0*/                   STS [R2+0x3300], R5 ;
      [B------:R-:W-:-:S04]         /*0800*/                   STS [R2+0x3380], R5 ;
      [B------:R-:W-:-:S04]         /*0810*/                   STS [R2+0x3400], R5 ;
      [B------:R-:W-:-:S04]         /*0820*/                   STS [R2+0x3480], R5 ;
      [B------:R-:W-:-:S04]         /*0830*/                   STS [R2+0x3500], R5 ;
      [B------:R-:W-:-:S04]         /*0840*/                   STS [R2+0x3580], R5 ;
      [B------:R-:W-:-:S04]         /*0850*/                   STS [R2+0x3600], R5 ;
      [B------:R-:W-:-:S04]         /*0860*/                   STS [R2+0x3680], R5 ;
      [B------:R-:W-:-:S04]         /*0870*/                   STS [R2+0x3700], R5 ;
      [B------:R0:W-:-:S02]         /*0880*/                   STS [R2+0x3780], R5 ;
      [B0-----:R-:W-:-:S01]         /*0890*/                   IADD3 R2, R2, 0x4000, RZ ;
      [B------:R-:W-:-:S05]         /*08a0*/              @!P0 BRA `(.L_x_0) ;
      [B------:R-:W-:Y:S02]         /*08b0*/                   CS2R.32 R5, SR_CLOCKLO ;
      [B------:R-:W-:-:S06]         /*08c0*/                   BAR.SYNC 0x0 ;
      [B------:R-:W-:-:S01]         /*08d0*/                   ISETP.GE.AND P0, PT, R4, 0x2000, PT ;
      [B------:R-:W-:-:S01]         /*08e0*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R-:W-:-:S11]         /*08f0*/                   BSSY B0, `(.L_x_1) ;
      [B------:R-:W-:-:S05]         /*0900*/               @P0 BRA `(.L_x_2) ;
      [B------:R-:W-:Y:S05]         /*0910*/                   MOV R3, 0x4 ;
      [B------:R-:W-:Y:S05]         /*0920*/                   IMAD.WIDE R2, R4, R3, c[0x0][0x170] ;
      [B------:R0:W5:-:S01]         /*0930*/                   LDG.E R9, desc[UR4][R2.64] ;
      [B------:R-:W-:-:S01]         /*0940*/                   IMNMX R7, R4.reuse, 0x1c00, !PT ;
      [B------:R-:W-:-:S01]         /*0950*/                   BSSY B1, `(.L_x_3) ;
      [B------:R-:W-:-:S02]         /*0960*/                   IMAD.MOV.U32 R10, RZ, RZ, R4 ;
      [B------:R-:W-:Y:S04]         /*0970*/                   IADD3 R7, -R4, 0x3ff, R7 ;
      [B------:R-:W-:-:S02]         /*0980*/                   LEA.HI R8, R7.reuse, 0x1, RZ, 0x16 ;
      [B------:R-:W-:-:S02]         /*0990*/                   ISETP.GE.U32.AND P0, PT, R7, 0xc00, PT ;
      [B------:R-:W-:Y:S13]         /*09a0*/                   LOP3.LUT P1, R8, R8, 0x3, RZ, 0xc0, !PT ;
      [B------:R-:W-:-:S05]         /*09b0*/              @!P1 BRA `(.L_x_4) ;
      [B0-----:R-:W-:Y:S02]         /*09c0*/                   MOV R10, R4 ;
  .L_x_5:
      [B------:R0:W1:-:S01]         /*09d0*/                   LDS R12, [R6] ;
      [B------:R-:W-:-:S02]         /*09e0*/                   IADD3 R8, R8, -0x1, RZ ;
      [B------:R-:W-:-:S02]         /*09f0*/                   IADD3 R10, R10, 0x400, RZ ;
      [B------:R-:W-:-:S02]         /*0a00*/                   ISETP.NE.AND P1, PT, R8, RZ, PT ;
      [B0-----:R-:W-:-:S01]         /*0a10*/                   IADD3 R6, R6, 0x1000, RZ ;
      [B-1---5:R-:W-:Y:S10]         /*0a20*/                   FADD R9, R12, R9 ;
      [B------:R-:W-:-:S05]         /*0a30*/               @P1 BRA `(.L_x_5) ;
  .L_x_4:
      [B0-----:R-:W-:-:S05]         /*0a40*/                   BSYNC B1 ;
  .L_x_3:
      [B------:R-:W-:-:S01]         /*0a50*/                   BSSY B1, `(.L_x_6) ;
      [B------:R-:W-:-:S05]         /*0a60*/              @!P0 BRA `(.L_x_7) ;
      [B------:R-:W-:-:S01]         /*0a70*/                   IADD3 R7, R10, -0x1000, RZ ;
      [B------:R-:W-:-:S01]         /*0a80*/                   BSSY B2, `(.L_x_8) ;
      [B------:R-:W-:-:S02]         /*0a90*/                   PLOP3.LUT P0, PT, PT, PT, PT, 0x80, 0x0 ;
      [B------:R-:W-:Y:S04]         /*0aa0*/                   IADD3 R6, -R7, 0x1000, RZ ;
      [B------:R-:W-:-:S02]         /*0ab0*/                   ISETP.GT.AND P1, PT, R6, 0x3000, PT ;
      [B------:R-:W-:Y:S11]         /*0ac0*/                   LEA R6, R10, 0x2000, 0x2 ;
      [B------:R-:W-:-:S05]         /*0ad0*/              @!P1 BRA `(.L_x_9) ;
      [B------:R-:W-:Y:S02]         /*0ae0*/                   PLOP3.LUT P0, PT, PT, PT, PT, 0x8, 0x0 ;
  .L_x_10:
      [B------:R-:W0:-:S01]         /*0af0*/                   LDS R8, [R6+-0x2000] ;
      [B------:R-:W-:Y:S03]         /*0b00*/                   IADD3 R7, R7, 0x4000, RZ ;
      [B------:R-:W1:-:S01]         /*0b10*/                   LDS R11, [R6+-0x1000] ;
      [B------:R-:W-:Y:S03]         /*0b20*/                   ISETP.GE.AND P1, PT, R7, -0x2000, PT ;
      [B------:R-:W2:-:S04]         /*0b30*/                   LDS R13, [R6] ;
      [B------:R-:W3:-:S04]         /*0b40*/                   LDS R15, [R6+0x1000] ;
      [B------:R-:W4:-:S04]         /*0b50*/                   LDS R17, [R6+0x2000] ;
      [B------:R-:W4:-:S04]         /*0b60*/                   LDS R19, [R6+0x3000] ;
      [B------:R-:W4:-:S04]         /*0b70*/                   LDS R21, [R6+0x4000] ;
      [B------:R-:W4:-:S04]         /*0b80*/                   LDS R23, [R6+0x5000] ;
      [B------:R-:W4:-:S04]         /*0b90*/                   LDS R25, [R6+0x6000] ;
      [B------:R-:W4:-:S01]         /*0ba0*/                   LDS R27, [R6+0x7000] ;
      [B0----5:R-:W-:Y:S03]         /*0bb0*/                   FADD R8, R8, R9 ;
      [B------:R-:W0:-:S01]         /*0bc0*/                   LDS R9, [R6+0x8000] ;
      [B-1----:R-:W-:Y:S03]         /*0bd0*/                   FADD R8, R8, R11 ;
      [B------:R-:W1:-:S01]         /*0be0*/                   LDS R11, [R6+0x9000] ;
      [B--2---:R-:W-:Y:S03]         /*0bf0*/                   FADD R8, R8, R13 ;
      [B------:R-:W2:-:S01]         /*0c00*/                   LDS R13, [R6+0xa000] ;
      [B---3--:R-:W-:Y:S03]         /*0c10*/                   FADD R8, R8, R15 ;
      [B------:R-:W3:-:S01]         /*0c20*/                   LDS R15, [R6+0xb000] ;
      [B----4-:R-:W-:Y:S03]         /*0c30*/                   FADD R8, R8, R17 ;
      [B------:R-:W4:-:S01]         /*0c40*/                   LDS R17, [R6+0xc000] ;
      [B------:R-:W-:Y:S03]         /*0c50*/                   FADD R8, R8, R19 ;
      [B------:R0:W4:-:S01]         /*0c60*/                   LDS R19, [R6+0xd000] ;
      [B------:R-:W-:Y:S04]         /*0c70*/                   FADD R8, R8, R21 ;
      [B------:R-:W-:-:S01]         /*0c80*/                   FADD R8, R8, R23 ;
      [B0-----:R-:W-:Y:S03]         /*0c90*/                   IADD3 R6, R6, 0x10000, RZ ;
      [B------:R-:W-:Y:S04]         /*0ca0*/                   FADD R8, R8, R25 ;
      [B------:R-:W-:Y:S04]         /*0cb0*/                   FADD R8, R8, R27 ;
      [B------:R-:W-:Y:S04]         /*0cc0*/                   FADD R8, R8, R9 ;
      [B-1----:R-:W-:Y:S04]         /*0cd0*/                   FADD R8, R8, R11 ;
      [B--2---:R-:W-:Y:S04]         /*0ce0*/                   FADD R8, R8, R13 ;
      [B---3--:R-:W-:Y:S04]         /*0cf0*/                   FADD R8, R8, R15 ;
      [B----4-:R-:W-:Y:S04]         /*0d00*/                   FADD R8, R8, R17 ;
      [B------:R-:W-:-:S01]         /*0d10*/                   FADD R9, R8, R19 ;
      [B------:R-:W-:-:S05]         /*0d20*/              @!P1 BRA `(.L_x_10) ;
  .L_x_9:
      [B------:R-:W-:-:S05]         /*0d30*/                   BSYNC B2 ;
  .L_x_8:
      [B------:R-:W-:-:S01]         /*0d40*/                   IADD3 R8, -R7, 0x1000, RZ ;
      [B------:R-:W-:-:S03]         /*0d50*/                   BSSY B2, `(.L_x_11) ;
      [B------:R-:W-:Y:S13]         /*0d60*/                   ISETP.GT.AND P1, PT, R8, 0x1000, PT ;
      [B------:R-:W-:-:S05]         /*0d70*/              @!P1 BRA `(.L_x_12) ;
      [B------:R-:W0:-:S01]         /*0d80*/                   LDS R8, [R6+-0x2000] ;
      [B------:R-:W-:-:S02]         /*0d90*/                   PLOP3.LUT P0, PT, PT, PT, PT, 0x8, 0x0 ;
      [B------:R-:W-:-:S01]         /*0da0*/                   IADD3 R7, R7, 0x2000, RZ ;
      [B------:R-:W1:-:S04]         /*0db0*/                   LDS R11, [R6+-0x1000] ;
      [B------:R-:W2:-:S04]         /*0dc0*/                   LDS R13, [R6] ;
      [B------:R-:W3:-:S04]         /*0dd0*/                   LDS R15, [R6+0x1000] ;
      [B------:R-:W4:-:S04]         /*0de0*/                   LDS R17, [R6+0x2000] ;
      [B------:R-:W4:-:S04]         /*0df0*/                   LDS R19, [R6+0x3000] ;
      [B------:R-:W4:-:S04]         /*0e00*/                   LDS R21, [R6+0x4000] ;
      [B------:R0:W4:-:S02]         /*0e10*/                   LDS R23, [R6+0x5000] ;
      [B0-----:R-:W-:-:S01]         /*0e20*/                   IADD3 R6, R6, 0x8000, RZ ;
      [B-----5:R-:W-:Y:S04]         /*0e30*/                   FADD R8, R9, R8 ;
      [B-1----:R-:W-:Y:S04]         /*0e40*/                   FADD R8, R8, R11 ;
      [B--2---:R-:W-:Y:S04]         /*0e50*/                   FADD R8, R8, R13 ;
      [B---3--:R-:W-:Y:S04]         /*0e60*/                   FADD R8, R8, R15 ;
      [B----4-:R-:W-:Y:S04]         /*0e70*/                   FADD R8, R8, R17 ;
      [B------:R-:W-:Y:S04]         /*0e80*/                   FADD R8, R8, R19 ;
      [B------:R-:W-:Y:S04]         /*0e90*/                   FADD R8, R8, R21 ;
      [B------:R-:W-:Y:S02]         /*0ea0*/                   FADD R9, R8, R23 ;
  .L_x_12:
      [B------:R-:W-:-:S05]         /*0eb0*/                   BSYNC B2 ;
  .L_x_11:
      [B------:R-:W-:Y:S13]         /*0ec0*/                   ISETP.LT.OR P0, PT, R7, 0x1000, P0 ;
      [B------:R-:W0:-:S04]         /*0ed0*/               @P0 LDS R8, [R6+-0x2000] ;
      [B------:R-:W1:-:S04]         /*0ee0*/               @P0 LDS R7, [R6+-0x1000] ;
      [B------:R-:W2:-:S04]         /*0ef0*/               @P0 LDS R10, [R6] ;
      [B------:R-:W3:-:S01]         /*0f00*/               @P0 LDS R12, [R6+0x1000] ;
      [B0----5:R-:W-:Y:S04]         /*0f10*/               @P0 FADD R8, R9, R8 ;
      [B-1----:R-:W-:Y:S04]         /*0f20*/               @P0 FADD R7, R8, R7 ;
      [B--2---:R-:W-:Y:S04]         /*0f30*/               @P0 FADD R7, R7, R10 ;
      [B---3--:R-:W-:Y:S02]         /*0f40*/               @P0 FADD R9, R7, R12 ;
  .L_x_7:
      [B------:R-:W-:-:S05]         /*0f50*/                   BSYNC B1 ;
  .L_x_6:
      [B-----5:R0:W-:-:S02]         /*0f60*/                   STG.E desc[UR4][R2.64], R9 ;
  .L_x_2:
      [B------:R-:W-:-:S05]         /*0f70*/                   BSYNC B0 ;
  .L_x_1:
      [B------:R-:W-:Y:S05]         /*0f80*/                   MOV R7, 0x4 ;
      [B0-----:R-:W-:Y:S04]         /*0f90*/                   IMAD.WIDE R2, R4, R7, c[0x0][0x160] ;
      [B------:R-:W-:-:S01]         /*0fa0*/                   IMAD.WIDE R6, R4, R7, c[0x0][0x168] ;
      [B------:R-:W-:-:S04]         /*0fb0*/                   STG.E desc[UR4][R2.64], R0 ;
      [B------:R-:W-:-:S01]         /*0fc0*/                   STG.E desc[UR4][R6.64], R5 ;
      [B------:R-:W-:-:S05]         /*0fd0*/                   EXIT ;
  .L_x_13:
      [B------:R-:W-:Y:S00]         /*0fe0*/                   BRA `(.L_x_13);
      [B------:R-:W-:Y:S00]         /*0ff0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1000*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1010*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1020*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1030*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1040*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1050*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1060*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1070*/                   NOP;
  .L_x_14:
  
  

// --------------------- .nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf --------------------------
	.section	.nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf,"aw",@nobits
	.__section_name         0x95 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x1680 	// maybe updated by assembler
	.__section_size         0x9000 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf:
  	.zero		36864
  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0x1940   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xe0   		// file size, maybe updated by assembler 
  .__segment_memsz   0xe0   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x488   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x11f8   		// file size, maybe updated by assembler 
  .__segment_memsz   0x11f8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z24SMem_writeBW_test_kernelPjS_Pf"  		// first section in this segment 
  .__segment_endsection      ".text._Z24SMem_writeBW_test_kernelPjS_Pf"  		// last  section in this segment 

// Program segment PT_LOAD, 6 
  .__segment  "PT_LOAD", 6 
  .__segment_offset  0x1680   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x0   		// file size, maybe updated by assembler 
  .__segment_memsz   0x9000   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf"  		// first section in this segment 
  .__segment_endsection      ".nv.shared._Z24SMem_writeBW_test_kernelPjS_Pf"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x1940   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xe0   		// file size, maybe updated by assembler 
  .__segment_memsz   0xe0   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------



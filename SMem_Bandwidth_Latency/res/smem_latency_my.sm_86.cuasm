// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM86 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM86)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          121 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x1940 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x1580 		// section header offset, maybe updated by assembler
	.__elf_flags            0x560556 		// Flags, SM_86(0x56), COMPUTE_86(0x56) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            4 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            15 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x1f0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x73
    /*0050*/ .byte 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*0058*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0060*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*0068*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[8] = b'.nv.info._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*006c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0074*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65
    /*007c*/ .byte 0x6d, 0x5f, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74
    /*0084*/ .byte 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73
    /*008c*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*0094*/ .byte 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[9] = b'.nv.shared._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*009b*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00a3*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73
    /*00ab*/ .byte 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x5f, 0x6c
    /*00b3*/ .byte 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74
    /*00bb*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00c3*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f
    /*00cb*/ .byte 0x00

    // .shstrtab[10] = b'.nv.constant0._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*00cc*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00d4*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00dc*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x73
    /*00e4*/ .byte 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*00ec*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*00f4*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*00fc*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[11] = b'.text._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*0100*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0108*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x6c
    /*0110*/ .byte 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*0118*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0120*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*0128*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[12] = b'.nv.info._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*012c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0134*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65
    /*013c*/ .byte 0x6d, 0x5f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x74
    /*0144*/ .byte 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73
    /*014c*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*0154*/ .byte 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[13] = b'.nv.shared._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*015b*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0163*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73
    /*016b*/ .byte 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x64, 0x5f, 0x6c
    /*0173*/ .byte 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74
    /*017b*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*0183*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f
    /*018b*/ .byte 0x00

    // .shstrtab[14] = b'.nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*018c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0194*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*019c*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x6c
    /*01a4*/ .byte 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*01ac*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*01b4*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*01bc*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[15] = b'.debug_frame\x00' 
    /*01c0*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*01c8*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[16] = b'.rel.debug_frame\x00' 
    /*01cd*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*01d5*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*01dd*/ .byte 0x00

    // .shstrtab[17] = b'.rela.debug_frame\x00' 
    /*01de*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*01e6*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*01ee*/ .byte 0x65, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x230 	// maybe updated by assembler
	.__section_size         0x2aa 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d
    /*0048*/ .byte 0x5f, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65
    /*0050*/ .byte 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0058*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*0060*/ .byte 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[8] = b'.text._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*0066*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*006e*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x73
    /*0076*/ .byte 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*007e*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0086*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*008e*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[9] = b'.nv.info._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*0092*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*009a*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65
    /*00a2*/ .byte 0x6d, 0x5f, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74
    /*00aa*/ .byte 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73
    /*00b2*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*00ba*/ .byte 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[10] = b'.nv.shared._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*00c1*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00c9*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73
    /*00d1*/ .byte 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x5f, 0x6c
    /*00d9*/ .byte 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74
    /*00e1*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00e9*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f
    /*00f1*/ .byte 0x00

    // .strtab[11] = b'$___ZZ27smem_st_latency_test_kernelPjS_S_E3Arr__289\x00' 
    /*00f2*/ .byte 0x24, 0x5f, 0x5f, 0x5f, 0x5a, 0x5a, 0x32, 0x37
    /*00fa*/ .byte 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x5f
    /*0102*/ .byte 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f
    /*010a*/ .byte 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72
    /*0112*/ .byte 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53
    /*011a*/ .byte 0x5f, 0x45, 0x33, 0x41, 0x72, 0x72, 0x5f, 0x5f
    /*0122*/ .byte 0x32, 0x38, 0x39, 0x00

    // .strtab[12] = b'.nv.constant0._Z27smem_st_latency_test_kernelPjS_S_\x00' 
    /*0126*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*012e*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0136*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x73
    /*013e*/ .byte 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*0146*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*014e*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*0156*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[13] = b'_param\x00' 
    /*015a*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[14] = b'_Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*0161*/ .byte 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d
    /*0169*/ .byte 0x5f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65
    /*0171*/ .byte 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0179*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*0181*/ .byte 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[15] = b'.text._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*0187*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*018f*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x6c
    /*0197*/ .byte 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*019f*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*01a7*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*01af*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[16] = b'.nv.info._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*01b3*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*01bb*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73, 0x6d, 0x65
    /*01c3*/ .byte 0x6d, 0x5f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x74
    /*01cb*/ .byte 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x73
    /*01d3*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*01db*/ .byte 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[17] = b'.nv.shared._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*01e2*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*01ea*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x37, 0x73
    /*01f2*/ .byte 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x64, 0x5f, 0x6c
    /*01fa*/ .byte 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74
    /*0202*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*020a*/ .byte 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53, 0x5f
    /*0212*/ .byte 0x00

    // .strtab[18] = b'$___ZZ27smem_ld_latency_test_kernelPjS_S_E3Arr__29\x00' 
    /*0213*/ .byte 0x24, 0x5f, 0x5f, 0x5f, 0x5a, 0x5a, 0x32, 0x37
    /*021b*/ .byte 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x64, 0x5f
    /*0223*/ .byte 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f
    /*022b*/ .byte 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72
    /*0233*/ .byte 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53, 0x5f, 0x53
    /*023b*/ .byte 0x5f, 0x45, 0x33, 0x41, 0x72, 0x72, 0x5f, 0x5f
    /*0243*/ .byte 0x32, 0x39, 0x00

    // .strtab[19] = b'.nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_\x00' 
    /*0246*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*024e*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0256*/ .byte 0x32, 0x37, 0x73, 0x6d, 0x65, 0x6d, 0x5f, 0x6c
    /*025e*/ .byte 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63
    /*0266*/ .byte 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*026e*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6a, 0x53
    /*0276*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[20] = b'.debug_frame\x00' 
    /*027a*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*0282*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[21] = b'.rel.debug_frame\x00' 
    /*0287*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*028f*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*0297*/ .byte 0x00

    // .strtab[22] = b'.rela.debug_frame\x00' 
    /*0298*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*02a0*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*02a8*/ .byte 0x65, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x4e0 	// maybe updated by assembler
	.__section_size         0xf0 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x8
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z27smem_st_latency_test_kernelPjS_S_": Container({'st_name': 102, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 11, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x66, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0b, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.shared._Z27smem_st_latency_test_kernelPjS_S_": Container({'st_name': 193, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 13, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xc1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0d, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".nv.constant0._Z27smem_st_latency_test_kernelPjS_S_": Container({'st_name': 294, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0x26, 0x01, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".text._Z27smem_ld_latency_test_kernelPjS_S_": Container({'st_name': 391, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 12, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0x87, 0x01, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] ".nv.shared._Z27smem_ld_latency_test_kernelPjS_S_": Container({'st_name': 482, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 14, 'st_value': 0, 'st_size': 0})
    /*0078*/ .byte 0xe2, 0x01, 0x00, 0x00, 0x03, 0x00, 0x0e, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[6] ".nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_": Container({'st_name': 582, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0090*/ .byte 0x46, 0x02, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0098*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00a0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[7] ".debug_frame": Container({'st_name': 634, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*00a8*/ .byte 0x7a, 0x02, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*00b0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00b8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[8] "_Z27smem_st_latency_test_kernelPjS_S_": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 11, 'st_value': 0, 'st_size': 1280})
    /*00c0*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0b, 0x00
    /*00c8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00d0*/ .byte 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[9] "_Z27smem_ld_latency_test_kernelPjS_S_": Container({'st_name': 353, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 12, 'st_value': 0, 'st_size': 1408})
    /*00d8*/ .byte 0x61, 0x01, 0x00, 0x00, 0x12, 0x10, 0x0c, 0x00
    /*00e0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00e8*/ .byte 0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0x1c0 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x5d0 	// maybe updated by assembler
	.__section_size         0xe0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z27smem_st_latency_test_kernelPjS_S_
          /*004c*/ 	.byte	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x14, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*007c*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff
          /*008c*/ 	.byte	0x0f, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80
          /*009c*/ 	.byte	0x28, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*00ac*/ 	.byte	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*00b4*/ 	.dword	_Z27smem_ld_latency_test_kernelPjS_S_
          /*00bc*/ 	.byte	0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00
          /*00cc*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*00dc*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x6b0 	// maybe updated by assembler
	.__section_size         0x60 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z27smem_ld_latency_test_kernelPjS_S_)
          /*0008*/ 	.word	0x0000000d
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z27smem_ld_latency_test_kernelPjS_S_)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z27smem_ld_latency_test_kernelPjS_S_)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z27smem_ld_latency_test_kernelPjS_S_)
          /*002c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_7:
          /*0030*/ 	.byte	0x04, 0x2f
          /*0032*/ 	.short	(.L_9 - .L_8)
  	.align		4
  .L_8:
          /*0034*/ 	.word	index@(_Z27smem_st_latency_test_kernelPjS_S_)
          /*0038*/ 	.word	0x0000000e
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_9:
          /*003c*/ 	.byte	0x04, 0x23
          /*003e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0040*/ 	.word	index@(_Z27smem_st_latency_test_kernelPjS_S_)
          /*0044*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_11:
          /*0048*/ 	.byte	0x04, 0x12
          /*004a*/ 	.short	(.L_13 - .L_12)
  	.align		4
  .L_12:
          /*004c*/ 	.word	index@(_Z27smem_st_latency_test_kernelPjS_S_)
          /*0050*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_13:
          /*0054*/ 	.byte	0x04, 0x11
          /*0056*/ 	.short	(.L_15 - .L_14)
  	.align		4
  .L_14:
          /*0058*/ 	.word	index@(_Z27smem_st_latency_test_kernelPjS_S_)
          /*005c*/ 	.word	0x00000000
  .L_15:
  
  
// --------------------- .nv.info._Z27smem_st_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.info._Z27smem_st_latency_test_kernelPjS_S_,"",@"SHT_CUDA_INFO"
	.__section_name         0x6c 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x710 	// maybe updated by assembler
	.__section_size         0x6c 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xb
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_17:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_19 - .L_18)
  	.align		4
  .L_18:
          /*0010*/ 	.word	index@(.nv.constant0._Z27smem_st_latency_test_kernelPjS_S_)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_19:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_21 - .L_20)
  .L_20:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0002
          /*0026*/ 	.short	0x0010
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_21:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_23 - .L_22)
  .L_22:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0001
          /*0036*/ 	.short	0x0008
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_23:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_25 - .L_24)
  .L_24:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0000
          /*0046*/ 	.short	0x0000
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_25:
          /*004c*/ 	.byte	0x03, 0x1b
          /*004e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0050*/ 	.byte	0x04, 0x1c
          /*0052*/ 	.short	(.L_27 - .L_26)
  
  
  	//   ....[0]....
  .L_26:
          /*0054*/ 	.word	0x00000400
  
  
  	//   ....[1]....
          /*0058*/ 	.word	0x00000450
  
  
  	//----- nvinfo : EIATTR_MAX_THREADS
  	.align		4
  .L_27:
          /*005c*/ 	.byte	0x04, 0x05
          /*005e*/ 	.short	(.L_29 - .L_28)
  .L_28:
          /*0060*/ 	.word	0x00000020
          /*0064*/ 	.word	0x00000001
          /*0068*/ 	.word	0x00000001
  .L_29:
  
  
// --------------------- .nv.info._Z27smem_ld_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.info._Z27smem_ld_latency_test_kernelPjS_S_,"",@"SHT_CUDA_INFO"
	.__section_name         0x12c 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x77c 	// maybe updated by assembler
	.__section_size         0x6c 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xc
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_31 - .L_30)
  .L_30:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_31:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_33 - .L_32)
  	.align		4
  .L_32:
          /*0010*/ 	.word	index@(.nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_33:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_35 - .L_34)
  .L_34:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0002
          /*0026*/ 	.short	0x0010
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_35:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_37 - .L_36)
  .L_36:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0001
          /*0036*/ 	.short	0x0008
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_37:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_39 - .L_38)
  .L_38:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0000
          /*0046*/ 	.short	0x0000
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_39:
          /*004c*/ 	.byte	0x03, 0x1b
          /*004e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0050*/ 	.byte	0x04, 0x1c
          /*0052*/ 	.short	(.L_41 - .L_40)
  
  
  	//   ....[0]....
  .L_40:
          /*0054*/ 	.word	0x00000420
  
  
  	//   ....[1]....
          /*0058*/ 	.word	0x00000470
  
  
  	//----- nvinfo : EIATTR_MAX_THREADS
  	.align		4
  .L_41:
          /*005c*/ 	.byte	0x04, 0x05
          /*005e*/ 	.short	(.L_43 - .L_42)
  .L_42:
          /*0060*/ 	.word	0x00000020
          /*0064*/ 	.word	0x00000001
          /*0068*/ 	.word	0x00000001
  .L_43:
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x1cd 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x7e8 	// maybe updated by assembler
	.__section_size         0x20 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z27smem_ld_latency_test_kernelPjS_S_, Container({'r_offset': 180, 'r_info': 38654705666, 'r_info_sym': 9, 'r_info_type': 2})
    // Relocation[1] : _Z27smem_st_latency_test_kernelPjS_S_, Container({'r_offset': 68, 'r_info': 34359738370, 'r_info_sym': 8, 'r_info_type': 2})

// --------------------- .nv.constant0._Z27smem_st_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.constant0._Z27smem_st_latency_test_kernelPjS_S_,"a",@progbits
	.__section_name         0xcc 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x808 	// maybe updated by assembler
	.__section_size         0x178 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xb
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z27smem_st_latency_test_kernelPjS_S_:
  	.zero		376
  
  
// --------------------- .nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_,"a",@progbits
	.__section_name         0x18c 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x980 	// maybe updated by assembler
	.__section_size         0x178 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xc
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z27smem_ld_latency_test_kernelPjS_S_:
  	.zero		376
  
  
// --------------------- .text._Z27smem_st_latency_test_kernelPjS_S_ --------------------------
	.section	.text._Z27smem_st_latency_test_kernelPjS_S_,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0xb00 	// maybe updated by assembler
	.__section_size         0x500 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xe000008
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=14"
  	.align	128
          .global         _Z27smem_st_latency_test_kernelPjS_S_
          .type           _Z27smem_st_latency_test_kernelPjS_S_,@function
          .size           _Z27smem_st_latency_test_kernelPjS_S_,(.L_x_2 - _Z27smem_st_latency_test_kernelPjS_S_)
          .other          _Z27smem_st_latency_test_kernelPjS_S_,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z27smem_st_latency_test_kernelPjS_S_:
  .text._Z27smem_st_latency_test_kernelPjS_S_:
      [B------:R-:W-:Y:S02]         /*0000*/                   IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R7, SR_TID.X ;
      [B------:R-:W-:-:S01]         /*0020*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B0-----:R-:W-:Y:S05]         /*0030*/                   SHF.L.U32 R0, R7, 0x2, RZ ;
      [B------:R-:W-:-:S04]         /*0040*/                   STS [R7.X4], R0 ;
      [B------:R-:W-:-:S06]         /*0050*/                   BAR.SYNC 0x0 ;
      [B------:R-:W-:Y:S02]         /*0060*/                   CS2R.32 R9, SR_CLOCKLO ;
      [B------:R0:W-:-:S04]         /*0070*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0080*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0090*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00a0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00b0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00c0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00d0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00e0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*00f0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0100*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0110*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0120*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0130*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0140*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0150*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0160*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0170*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0180*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0190*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01a0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01b0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01c0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01d0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01e0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*01f0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0200*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0210*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0220*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0230*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0240*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0250*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0260*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0270*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0280*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0290*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02a0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02b0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02c0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02d0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02e0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*02f0*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0300*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0310*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0320*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0330*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0340*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0350*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0360*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S04]         /*0370*/                   STS [R0], R7 ;
      [B0-----:R0:W-:-:S02]         /*0380*/                   STS [R0], R7 ;
      [B0-----:R-:W-:Y:S02]         /*0390*/                   CS2R.32 R11, SR_CLOCKLO ;
      [B------:R-:W-:-:S01]         /*03a0*/                   ISETP.NE.AND P0, PT, R0, -0x1, PT ;
      [B------:R-:W-:Y:S04]         /*03b0*/                   IMAD.MOV.U32 R4, RZ, RZ, 0x4 ;
      [B------:R-:W-:Y:S04]         /*03c0*/                   IMAD.WIDE R2, R7, R4, c[0x0][0x160] ;
      [B------:R-:W-:-:S01]         /*03d0*/                   IMAD.WIDE R4, R7, R4, c[0x0][0x168] ;
      [B------:R1:W-:-:S04]         /*03e0*/                   STG.E desc[UR4][R2.64], R9 ;
      [B------:R1:W-:-:S01]         /*03f0*/                   STG.E desc[UR4][R4.64], R11 ;
      [B------:R-:W-:-:S05]         /*0400*/               @P0 EXIT ;
      [B-1----:R-:W1:-:S01]         /*0410*/                   LDS R5, [R7.X4] ;
      [B------:R-:W-:-:S01]         /*0420*/                   MOV R2, c[0x0][0x170] ;
      [B------:R-:W-:Y:S05]         /*0430*/                   IMAD.MOV.U32 R3, RZ, RZ, c[0x0][0x174] ;
      [B-1----:R-:W-:-:S01]         /*0440*/                   STG.E desc[UR4][R2.64], R5 ;
      [B------:R-:W-:-:S05]         /*0450*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*0460*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0470*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0480*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0490*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04f0*/                   NOP;
  .L_x_2:
  
  

// --------------------- .text._Z27smem_ld_latency_test_kernelPjS_S_ --------------------------
	.section	.text._Z27smem_ld_latency_test_kernelPjS_S_,"ax",@progbits
	.__section_name         0x100 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0x1000 	// maybe updated by assembler
	.__section_size         0x580 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xd000009
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=13"
  	.align	128
          .global         _Z27smem_ld_latency_test_kernelPjS_S_
          .type           _Z27smem_ld_latency_test_kernelPjS_S_,@function
          .size           _Z27smem_ld_latency_test_kernelPjS_S_,(.L_x_3 - _Z27smem_ld_latency_test_kernelPjS_S_)
          .other          _Z27smem_ld_latency_test_kernelPjS_S_,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z27smem_ld_latency_test_kernelPjS_S_:
  .text._Z27smem_ld_latency_test_kernelPjS_S_:
      [B------:R-:W-:Y:S02]         /*0000*/                   IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R0, SR_TID.X ;
      [B------:R-:W-:-:S01]         /*0020*/                   MOV R3, 0x4 ;
      [B------:R-:W-:-:S01]         /*0030*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B0-----:R-:W-:Y:S03]         /*0040*/                   IMAD.SHL.U32 R5, R0, 0x4, RZ ;
      [B------:R-:W-:-:S02]         /*0050*/                   IMAD R2, R0, R3, c[0x0][0x18] ;
      [B------:R-:W-:-:S03]         /*0060*/                   STS [R0.X4], R5 ;
      [B------:R-:W-:-:S01]         /*0070*/                   IADD3 R10, R2, -c[0x0][0x18], RZ ;
      [B------:R-:W-:-:S06]         /*0080*/                   BAR.SYNC 0x0 ;
      [B------:R-:W-:Y:S02]         /*0090*/                   CS2R.32 R2, SR_CLOCKLO ;
      [B------:R-:W0:-:S04]         /*00a0*/                   LDS R4, [R10] ;
      [B0-----:R-:W0:-:S04]         /*00b0*/                   LDS R4, [R4] ;
      [B0-----:R-:W0:-:S04]         /*00c0*/                   LDS R5, [R4] ;
      [B0-----:R-:W0:-:S04]         /*00d0*/                   LDS R5, [R5] ;
      [B0-----:R-:W0:-:S04]         /*00e0*/                   LDS R6, [R5] ;
      [B0-----:R-:W0:-:S04]         /*00f0*/                   LDS R6, [R6] ;
      [B0-----:R-:W0:-:S04]         /*0100*/                   LDS R7, [R6] ;
      [B0-----:R-:W0:-:S04]         /*0110*/                   LDS R7, [R7] ;
      [B0-----:R-:W0:-:S04]         /*0120*/                   LDS R8, [R7] ;
      [B0-----:R-:W0:-:S04]         /*0130*/                   LDS R8, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0140*/                   LDS R9, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0150*/                   LDS R9, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0160*/                   LDS R10, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0170*/                   LDS R10, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0180*/                   LDS R4, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0190*/                   LDS R4, [R4] ;
      [B0-----:R-:W0:-:S04]         /*01a0*/                   LDS R5, [R4] ;
      [B0-----:R-:W0:-:S04]         /*01b0*/                   LDS R5, [R5] ;
      [B0-----:R-:W0:-:S04]         /*01c0*/                   LDS R6, [R5] ;
      [B0-----:R-:W0:-:S04]         /*01d0*/                   LDS R6, [R6] ;
      [B0-----:R-:W0:-:S04]         /*01e0*/                   LDS R7, [R6] ;
      [B0-----:R-:W0:-:S04]         /*01f0*/                   LDS R7, [R7] ;
      [B0-----:R-:W0:-:S04]         /*0200*/                   LDS R8, [R7] ;
      [B0-----:R-:W0:-:S04]         /*0210*/                   LDS R8, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0220*/                   LDS R9, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0230*/                   LDS R9, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0240*/                   LDS R10, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0250*/                   LDS R10, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0260*/                   LDS R4, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0270*/                   LDS R4, [R4] ;
      [B0-----:R-:W0:-:S04]         /*0280*/                   LDS R5, [R4] ;
      [B0-----:R-:W0:-:S04]         /*0290*/                   LDS R5, [R5] ;
      [B0-----:R-:W0:-:S04]         /*02a0*/                   LDS R6, [R5] ;
      [B0-----:R-:W0:-:S04]         /*02b0*/                   LDS R6, [R6] ;
      [B0-----:R-:W0:-:S04]         /*02c0*/                   LDS R7, [R6] ;
      [B0-----:R-:W0:-:S04]         /*02d0*/                   LDS R7, [R7] ;
      [B0-----:R-:W0:-:S04]         /*02e0*/                   LDS R8, [R7] ;
      [B0-----:R-:W0:-:S04]         /*02f0*/                   LDS R8, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0300*/                   LDS R9, [R8] ;
      [B0-----:R-:W0:-:S04]         /*0310*/                   LDS R9, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0320*/                   LDS R10, [R9] ;
      [B0-----:R-:W0:-:S04]         /*0330*/                   LDS R10, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0340*/                   LDS R4, [R10] ;
      [B0-----:R-:W0:-:S04]         /*0350*/                   LDS R4, [R4] ;
      [B0-----:R-:W0:-:S04]         /*0360*/                   LDS R5, [R4] ;
      [B0-----:R-:W0:-:S04]         /*0370*/                   LDS R5, [R5] ;
      [B0-----:R-:W0:-:S04]         /*0380*/                   LDS R6, [R5] ;
      [B0-----:R-:W0:-:S04]         /*0390*/                   LDS R6, [R6] ;
      [B0-----:R-:W0:-:S04]         /*03a0*/                   LDS R7, [R6] ;
      [B0-----:R-:W0:-:S02]         /*03b0*/                   LDS R7, [R7] ;
      [B------:R-:W-:Y:S02]         /*03c0*/                   CS2R.32 R9, SR_CLOCKLO ;
      [B0-----:R-:W-:-:S01]         /*03d0*/                   ISETP.NE.AND P0, PT, R7, -0x1, PT ;
      [B------:R-:W-:Y:S04]         /*03e0*/                   IMAD.WIDE R4, R0, R3, c[0x0][0x160] ;
      [B------:R-:W-:-:S01]         /*03f0*/                   IMAD.WIDE R6, R0, R3, c[0x0][0x168] ;
      [B------:R0:W-:-:S04]         /*0400*/                   STG.E desc[UR4][R4.64], R2 ;
      [B------:R0:W-:-:S03]         /*0410*/                   STG.E desc[UR4][R6.64], R9 ;
      [B------:R-:W-:-:S05]         /*0420*/               @P0 EXIT ;
      [B0-----:R-:W-:-:S01]         /*0430*/                   IMAD.MOV.U32 R5, RZ, RZ, -0x1 ;
      [B------:R-:W-:-:S02]         /*0440*/                   MOV R2, c[0x0][0x170] ;
      [B------:R-:W-:Y:S05]         /*0450*/                   MOV R3, c[0x0][0x174] ;
      [B------:R-:W-:-:S01]         /*0460*/                   STG.E desc[UR4][R2.64], R5 ;
      [B------:R-:W-:-:S05]         /*0470*/                   EXIT ;
  .L_x_1:
      [B------:R-:W-:Y:S00]         /*0480*/                   BRA `(.L_x_1);
      [B------:R-:W-:Y:S00]         /*0490*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*04f0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0500*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0510*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0520*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0530*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0540*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0550*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0560*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0570*/                   NOP;
  .L_x_3:
  
  

// --------------------- .nv.shared._Z27smem_st_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.shared._Z27smem_st_latency_test_kernelPjS_S_,"aw",@nobits
	.__section_name         0x9b 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x1580 	// maybe updated by assembler
	.__section_size         0x148 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xb
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.shared._Z27smem_st_latency_test_kernelPjS_S_:
  	.zero		328
  
  
// --------------------- .nv.shared._Z27smem_ld_latency_test_kernelPjS_S_ --------------------------
	.section	.nv.shared._Z27smem_ld_latency_test_kernelPjS_S_,"aw",@nobits
	.__section_name         0x15b 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x1580 	// maybe updated by assembler
	.__section_size         0x80 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xc
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.shared._Z27smem_ld_latency_test_kernelPjS_S_:
  	.zero		128
  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0x1940   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xe0   		// file size, maybe updated by assembler 
  .__segment_memsz   0xe0   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x808   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xd78   		// file size, maybe updated by assembler 
  .__segment_memsz   0xd78   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z27smem_st_latency_test_kernelPjS_S_"  		// first section in this segment 
  .__segment_endsection      ".text._Z27smem_ld_latency_test_kernelPjS_S_"  		// last  section in this segment 

// Program segment PT_LOAD, 6 
  .__segment  "PT_LOAD", 6 
  .__segment_offset  0x1580   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x0   		// file size, maybe updated by assembler 
  .__segment_memsz   0x1c8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.shared._Z27smem_st_latency_test_kernelPjS_S_"  		// first section in this segment 
  .__segment_endsection      ".nv.shared._Z27smem_ld_latency_test_kernelPjS_S_"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x1940   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xe0   		// file size, maybe updated by assembler 
  .__segment_memsz   0xe0   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------



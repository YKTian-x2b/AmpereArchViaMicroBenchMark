//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z23L2CacheSize_test_kernel6float4PjS0_Pf

.visible .entry _Z23L2CacheSize_test_kernel6float4PjS0_Pf(
	.param .align 16 .b8 _Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_0[16],
	.param .u64 _Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_1,
	.param .u64 _Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_2,
	.param .u64 _Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_1];
	ld.param.u64 	%rd2, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_2];
	ld.param.u64 	%rd3, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_3];
	ld.param.f32 	%f2, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_0+4];
	ld.param.f32 	%f3, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_0+8];
	ld.param.f32 	%f4, [_Z23L2CacheSize_test_kernel6float4PjS0_Pf_param_0];
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r7, %r6, %r8;
	fma.rn.f32 	%f5, %f4, %f3, %f2;
	fma.rn.f32 	%f6, %f5, %f3, %f2;
	fma.rn.f32 	%f7, %f6, %f3, %f2;
	fma.rn.f32 	%f8, %f7, %f3, %f2;
	fma.rn.f32 	%f9, %f8, %f3, %f2;
	fma.rn.f32 	%f10, %f9, %f3, %f2;
	fma.rn.f32 	%f11, %f10, %f3, %f2;
	fma.rn.f32 	%f12, %f11, %f3, %f2;
	fma.rn.f32 	%f13, %f12, %f3, %f2;
	fma.rn.f32 	%f14, %f13, %f3, %f2;
	// begin inline asm
	bar.sync 0;
mov.u32 %r4, %clock;

	// end inline asm
	and.b32  	%r9, %r1, 31;
	fma.rn.f32 	%f15, %f14, %f3, %f2;
	fma.rn.f32 	%f16, %f15, %f3, %f2;
	fma.rn.f32 	%f17, %f16, %f3, %f2;
	fma.rn.f32 	%f18, %f17, %f3, %f2;
	fma.rn.f32 	%f19, %f18, %f3, %f2;
	fma.rn.f32 	%f20, %f19, %f3, %f2;
	fma.rn.f32 	%f21, %f20, %f3, %f2;
	fma.rn.f32 	%f22, %f21, %f3, %f2;
	fma.rn.f32 	%f23, %f22, %f3, %f2;
	fma.rn.f32 	%f1, %f23, %f3, %f2;
	// begin inline asm
	mov.u32 %r5, %clock;
	// end inline asm
	// begin inline asm
	bar.sync 0;

	// end inline asm
	setp.ne.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd4, %rd1;
	shr.s32 	%r10, %r1, 5;
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd4, %rd5;
	st.global.u32 	[%rd6], %r4;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	st.global.u32 	[%rd8], %r5;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f1;

$L__BB0_2:
	ret;

}


//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z17l1_latency_kernelILi50EEvPPvS1_Pj

.visible .entry _Z17l1_latency_kernelILi50EEvPPvS1_Pj(
	.param .u64 _Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_0,
	.param .u64 _Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_1,
	.param .u64 _Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_2
)
.maxntid 4, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<210>;


	ld.param.u64 	%rd202, [_Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_0];
	ld.param.u64 	%rd1, [_Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_1];
	ld.param.u64 	%rd203, [_Z17l1_latency_kernelILi50EEvPPvS1_Pj_param_2];
	mov.u32 	%r3, %tid.x;
	mul.wide.u32 	%rd204, %r3, 8;
	add.s64 	%rd4, %rd202, %rd204;
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	bar.sync 0;
mov.u32 %r1, %clock;

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.nc.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	bar.sync 0;
mov.u32 %r2, %clock;

	// end inline asm
	sub.s32 	%r4, %r2, %r1;
	cvta.to.global.u64 	%rd205, %rd203;
	mul.wide.u32 	%rd206, %r3, 4;
	add.s64 	%rd207, %rd205, %rd206;
	st.global.u32 	[%rd207], %r4;
	setp.ne.s64 	%p1, %rd4, 0;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd208, %rd1;
	mov.u64 	%rd209, 0;
	st.global.u64 	[%rd208], %rd209;

$L__BB0_2:
	ret;

}


// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM86 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM86)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          121 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0xd00 		// program header offset, maybe updated by assembler
	.__elf_shoff            0xa80 		// section header offset, maybe updated by assembler
	.__elf_flags            0x560556 		// Flags, SM_86(0x56), COMPUTE_86(0x56) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            10 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x134 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x32, 0x33, 0x4c, 0x32, 0x63, 0x61, 0x63, 0x68
    /*0050*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x66, 0x6c, 0x6f, 0x61
    /*0058*/ .byte 0x74, 0x32, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65
    /*0060*/ .byte 0x6c, 0x50, 0x4b, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0068*/ .byte 0x74, 0x32, 0x50, 0x66, 0x00

    // .shstrtab[8] = b'.nv.info._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*006d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0075*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x33, 0x4c, 0x32, 0x63
    /*007d*/ .byte 0x61, 0x63, 0x68, 0x65, 0x42, 0x57, 0x5f, 0x66
    /*0085*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x5f, 0x6b, 0x65
    /*008d*/ .byte 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x4b, 0x36, 0x66
    /*0095*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x50, 0x66, 0x00

    // .shstrtab[9] = b'.nv.shared._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*009d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00a5*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x33, 0x4c
    /*00ad*/ .byte 0x32, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x57
    /*00b5*/ .byte 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x5f
    /*00bd*/ .byte 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x4b
    /*00c5*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x50
    /*00cd*/ .byte 0x66, 0x00

    // .shstrtab[10] = b'.nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*00cf*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00d7*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00df*/ .byte 0x32, 0x33, 0x4c, 0x32, 0x63, 0x61, 0x63, 0x68
    /*00e7*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x66, 0x6c, 0x6f, 0x61
    /*00ef*/ .byte 0x74, 0x32, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65
    /*00f7*/ .byte 0x6c, 0x50, 0x4b, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*00ff*/ .byte 0x74, 0x32, 0x50, 0x66, 0x00

    // .shstrtab[11] = b'.debug_frame\x00' 
    /*0104*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*010c*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[12] = b'.rel.debug_frame\x00' 
    /*0111*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0119*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*0121*/ .byte 0x00

    // .shstrtab[13] = b'.rela.debug_frame\x00' 
    /*0122*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*012a*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0132*/ .byte 0x65, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x174 	// maybe updated by assembler
	.__section_size         0x162 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x32, 0x33, 0x4c, 0x32, 0x63, 0x61
    /*0048*/ .byte 0x63, 0x68, 0x65, 0x42, 0x57, 0x5f, 0x66, 0x6c
    /*0050*/ .byte 0x6f, 0x61, 0x74, 0x32, 0x5f, 0x6b, 0x65, 0x72
    /*0058*/ .byte 0x6e, 0x65, 0x6c, 0x50, 0x4b, 0x36, 0x66, 0x6c
    /*0060*/ .byte 0x6f, 0x61, 0x74, 0x32, 0x50, 0x66, 0x00

    // .strtab[8] = b'.text._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*0067*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*006f*/ .byte 0x32, 0x33, 0x4c, 0x32, 0x63, 0x61, 0x63, 0x68
    /*0077*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x66, 0x6c, 0x6f, 0x61
    /*007f*/ .byte 0x74, 0x32, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65
    /*0087*/ .byte 0x6c, 0x50, 0x4b, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*008f*/ .byte 0x74, 0x32, 0x50, 0x66, 0x00

    // .strtab[9] = b'.nv.info._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*0094*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*009c*/ .byte 0x2e, 0x5f, 0x5a, 0x32, 0x33, 0x4c, 0x32, 0x63
    /*00a4*/ .byte 0x61, 0x63, 0x68, 0x65, 0x42, 0x57, 0x5f, 0x66
    /*00ac*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x5f, 0x6b, 0x65
    /*00b4*/ .byte 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x4b, 0x36, 0x66
    /*00bc*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x50, 0x66, 0x00

    // .strtab[10] = b'.nv.shared._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*00c4*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00cc*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x32, 0x33, 0x4c
    /*00d4*/ .byte 0x32, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x57
    /*00dc*/ .byte 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x5f
    /*00e4*/ .byte 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x4b
    /*00ec*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x50
    /*00f4*/ .byte 0x66, 0x00

    // .strtab[11] = b'.nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf\x00' 
    /*00f6*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00fe*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0106*/ .byte 0x32, 0x33, 0x4c, 0x32, 0x63, 0x61, 0x63, 0x68
    /*010e*/ .byte 0x65, 0x42, 0x57, 0x5f, 0x66, 0x6c, 0x6f, 0x61
    /*0116*/ .byte 0x74, 0x32, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65
    /*011e*/ .byte 0x6c, 0x50, 0x4b, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0126*/ .byte 0x74, 0x32, 0x50, 0x66, 0x00

    // .strtab[12] = b'_param\x00' 
    /*012b*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[13] = b'.debug_frame\x00' 
    /*0132*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*013a*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[14] = b'.rel.debug_frame\x00' 
    /*013f*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0147*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*014f*/ .byte 0x00

    // .strtab[15] = b'.rela.debug_frame\x00' 
    /*0150*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*0158*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0160*/ .byte 0x65, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2d8 	// maybe updated by assembler
	.__section_size         0x78 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x4
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z23L2cacheBW_float2_kernelPK6float2Pf": Container({'st_name': 103, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x67, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf": Container({'st_name': 246, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 8, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xf6, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".debug_frame": Container({'st_name': 306, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0x32, 0x01, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] "_Z23L2cacheBW_float2_kernelPK6float2Pf": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 1152})
    /*0060*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x09, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0x104 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x350 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z23L2cacheBW_float2_kernelPK6float2Pf
          /*004c*/ 	.byte	0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0xe8, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3c0 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z23L2cacheBW_float2_kernelPK6float2Pf)
          /*0008*/ 	.word	0x00000026
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z23L2cacheBW_float2_kernelPK6float2Pf)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z23L2cacheBW_float2_kernelPK6float2Pf)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z23L2cacheBW_float2_kernelPK6float2Pf)
          /*002c*/ 	.word	0x00000000
  .L_7:
  
  
// --------------------- .nv.info._Z23L2cacheBW_float2_kernelPK6float2Pf --------------------------
	.section	.nv.info._Z23L2cacheBW_float2_kernelPK6float2Pf,"",@"SHT_CUDA_INFO"
	.__section_name         0x6d 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3f0 	// maybe updated by assembler
	.__section_size         0x4c 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_9 - .L_8)
  .L_8:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_9:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0010*/ 	.word	index@(.nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_11:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_13 - .L_12)
  .L_12:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0001
          /*0026*/ 	.short	0x0008
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_13:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0000
          /*0036*/ 	.short	0x0000
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_15:
          /*003c*/ 	.byte	0x03, 0x1b
          /*003e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0040*/ 	.byte	0x04, 0x1c
          /*0042*/ 	.short	(.L_17 - .L_16)
  
  
  	//   ....[0]....
  .L_16:
          /*0044*/ 	.word	0x000003a0
  
  
  	//   ....[1]....
          /*0048*/ 	.word	0x000003e0
  .L_17:
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x111 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x440 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z23L2cacheBW_float2_kernelPK6float2Pf, Container({'r_offset': 68, 'r_info': 17179869186, 'r_info_sym': 4, 'r_info_type': 2})

// --------------------- .nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf --------------------------
	.section	.nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf,"a",@progbits
	.__section_name         0xcf 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x450 	// maybe updated by assembler
	.__section_size         0x170 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf:
  	.zero		368
  
  
// --------------------- .text._Z23L2cacheBW_float2_kernelPK6float2Pf --------------------------
	.section	.text._Z23L2cacheBW_float2_kernelPK6float2Pf,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x600 	// maybe updated by assembler
	.__section_size         0x480 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x26000004
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=38"
  	.align	128
          .global         _Z23L2cacheBW_float2_kernelPK6float2Pf
          .type           _Z23L2cacheBW_float2_kernelPK6float2Pf,@function
          .size           _Z23L2cacheBW_float2_kernelPK6float2Pf,(.L_x_1 - _Z23L2cacheBW_float2_kernelPK6float2Pf)
          .other          _Z23L2cacheBW_float2_kernelPK6float2Pf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z23L2cacheBW_float2_kernelPK6float2Pf:
  .text._Z23L2cacheBW_float2_kernelPK6float2Pf:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R0, SR_CTAID.X ;
      [B------:R-:W-:Y:S03]         /*0020*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R-:W0:-:S02]         /*0030*/                   S2R R3, SR_TID.X ;
      [B0-----:R-:W-:Y:S04]         /*0040*/                   LEA R0, R0, R3, 0xd ;
      [B------:R-:W-:Y:S04]         /*0050*/                   SHF.L.U32 R0, R0, 0x3, RZ ;
      [B------:R-:W-:Y:S04]         /*0060*/                   LOP3.LUT R0, R0, 0x1ffff8, RZ, 0xc0, !PT ;
      [B------:R-:W-:Y:S04]         /*0070*/                   IADD3 R30, P0, R0, c[0x0][0x160], RZ ;
      [B------:R-:W-:Y:S05]         /*0080*/                   IADD3.X R31, RZ, c[0x0][0x164], RZ, P0, !PT ;
      [B------:R-:W2:-:S04]         /*0090*/                   LDG.E.64.STRONG.GPU R32, desc[UR4][R30.64] ;
      [B------:R-:W3:-:S04]         /*00a0*/                   LDG.E.64.STRONG.GPU R34, desc[UR4][R30.64+0x1000] ;
      [B------:R-:W4:-:S04]         /*00b0*/                   LDG.E.64.STRONG.GPU R2, desc[UR4][R30.64+0x2000] ;
      [B------:R-:W5:-:S04]         /*00c0*/                   LDG.E.64.STRONG.GPU R4, desc[UR4][R30.64+0x3000] ;
      [B------:R-:W5:-:S04]         /*00d0*/                   LDG.E.64.STRONG.GPU R6, desc[UR4][R30.64+0x4000] ;
      [B------:R-:W5:-:S04]         /*00e0*/                   LDG.E.64.STRONG.GPU R8, desc[UR4][R30.64+0x5000] ;
      [B------:R-:W5:-:S04]         /*00f0*/                   LDG.E.64.STRONG.GPU R10, desc[UR4][R30.64+0x6000] ;
      [B------:R-:W5:-:S04]         /*0100*/                   LDG.E.64.STRONG.GPU R12, desc[UR4][R30.64+0x7000] ;
      [B------:R-:W5:-:S04]         /*0110*/                   LDG.E.64.STRONG.GPU R14, desc[UR4][R30.64+0x8000] ;
      [B------:R-:W5:-:S04]         /*0120*/                   LDG.E.64.STRONG.GPU R16, desc[UR4][R30.64+0x9000] ;
      [B------:R-:W5:-:S04]         /*0130*/                   LDG.E.64.STRONG.GPU R18, desc[UR4][R30.64+0xa000] ;
      [B------:R-:W5:-:S04]         /*0140*/                   LDG.E.64.STRONG.GPU R20, desc[UR4][R30.64+0xb000] ;
      [B------:R-:W5:-:S04]         /*0150*/                   LDG.E.64.STRONG.GPU R22, desc[UR4][R30.64+0xc000] ;
      [B------:R-:W5:-:S04]         /*0160*/                   LDG.E.64.STRONG.GPU R24, desc[UR4][R30.64+0xd000] ;
      [B------:R-:W5:-:S04]         /*0170*/                   LDG.E.64.STRONG.GPU R26, desc[UR4][R30.64+0xe000] ;
      [B------:R-:W5:-:S01]         /*0180*/                   LDG.E.64.STRONG.GPU R28, desc[UR4][R30.64+0xf000] ;
      [B--2---:R-:W-:-:S01]         /*0190*/                   FADD R32, R32, R33 ;
      [B---3--:R-:W-:Y:S03]         /*01a0*/                   FADD R35, R34, R35 ;
      [B------:R-:W-:-:S01]         /*01b0*/                   FADD R32, RZ, R32 ;
      [B----4-:R-:W-:Y:S03]         /*01c0*/                   FADD R3, R2, R3 ;
      [B------:R-:W-:-:S01]         /*01d0*/                   FADD R32, R32, R35 ;
      [B-----5:R-:W-:Y:S03]         /*01e0*/                   FADD R4, R4, R5 ;
      [B------:R-:W-:-:S01]         /*01f0*/                   FADD R3, R32, R3 ;
      [B------:R-:W-:Y:S03]         /*0200*/                   FADD R6, R6, R7 ;
      [B------:R-:W-:-:S01]         /*0210*/                   FADD R3, R3, R4 ;
      [B------:R-:W-:Y:S03]         /*0220*/                   FADD R8, R8, R9 ;
      [B------:R-:W-:-:S01]         /*0230*/                   FADD R3, R3, R6 ;
      [B------:R-:W-:Y:S03]         /*0240*/                   FADD R10, R10, R11 ;
      [B------:R-:W-:-:S01]         /*0250*/                   FADD R3, R3, R8 ;
      [B------:R-:W-:Y:S03]         /*0260*/                   FADD R12, R12, R13 ;
      [B------:R-:W-:-:S01]         /*0270*/                   FADD R3, R3, R10 ;
      [B------:R-:W-:Y:S03]         /*0280*/                   FADD R14, R14, R15 ;
      [B------:R-:W-:-:S01]         /*0290*/                   FADD R3, R3, R12 ;
      [B------:R-:W-:Y:S03]         /*02a0*/                   FADD R16, R16, R17 ;
      [B------:R-:W-:-:S01]         /*02b0*/                   FADD R3, R3, R14 ;
      [B------:R-:W-:Y:S03]         /*02c0*/                   FADD R18, R18, R19 ;
      [B------:R-:W-:-:S01]         /*02d0*/                   FADD R3, R3, R16 ;
      [B------:R-:W-:Y:S03]         /*02e0*/                   FADD R20, R20, R21 ;
      [B------:R-:W-:-:S01]         /*02f0*/                   FADD R3, R3, R18 ;
      [B------:R-:W-:Y:S03]         /*0300*/                   FADD R22, R22, R23 ;
      [B------:R-:W-:-:S01]         /*0310*/                   FADD R3, R3, R20 ;
      [B------:R-:W-:Y:S03]         /*0320*/                   FADD R24, R24, R25 ;
      [B------:R-:W-:-:S01]         /*0330*/                   FADD R3, R3, R22 ;
      [B------:R-:W-:Y:S03]         /*0340*/                   FADD R26, R26, R27 ;
      [B------:R-:W-:-:S01]         /*0350*/                   FADD R3, R3, R24 ;
      [B------:R-:W-:Y:S03]         /*0360*/                   FADD R28, R28, R29 ;
      [B------:R-:W-:Y:S04]         /*0370*/                   FADD R3, R3, R26 ;
      [B------:R-:W-:Y:S05]         /*0380*/                   FADD R5, R3, R28 ;
      [B------:R-:W-:Y:S13]         /*0390*/                   FSETP.NEU.AND P0, PT, R5, RZ, PT ;
      [B------:R-:W-:-:S05]         /*03a0*/              @!P0 EXIT ;
      [B------:R-:W-:-:S02]         /*03b0*/                   MOV R2, c[0x0][0x168] ;
      [B------:R-:W-:Y:S05]         /*03c0*/                   MOV R3, c[0x0][0x16c] ;
      [B------:R-:W-:-:S01]         /*03d0*/                   STG.E desc[UR4][R2.64], R5 ;
      [B------:R-:W-:-:S05]         /*03e0*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*03f0*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0400*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0410*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0420*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0430*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0440*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0450*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0460*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0470*/                   NOP;
  .L_x_1:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0xd00   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x450   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x630   		// file size, maybe updated by assembler 
  .__segment_memsz   0x630   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z23L2cacheBW_float2_kernelPK6float2Pf"  		// first section in this segment 
  .__segment_endsection      ".text._Z23L2cacheBW_float2_kernelPK6float2Pf"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0xd00   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------



//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z25L2cacheBW_myDefine_kernelPKfPf

.visible .entry _Z25L2cacheBW_myDefine_kernelPKfPf(
	.param .u64 _Z25L2cacheBW_myDefine_kernelPKfPf_param_0,
	.param .u64 _Z25L2cacheBW_myDefine_kernelPKfPf_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<22>;


	ld.param.u64 	%rd18, [_Z25L2cacheBW_myDefine_kernelPKfPf_param_0];
	ld.param.u64 	%rd1, [_Z25L2cacheBW_myDefine_kernelPKfPf_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 13;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r4, %r2, %r3;
	shl.b32 	%r5, %r4, 2;
	cvt.u64.u32 	%rd19, %r5;
	and.b64  	%rd20, %rd19, 2097148;
	add.s64 	%rd2, %rd18, %rd20;
	// begin inline asm
	ld.global.cg.b32 %f2, [%rd2];
	// end inline asm
	add.f32 	%f18, %f2, 0f00000000;
	add.s64 	%rd3, %rd2, 2048;
	// begin inline asm
	ld.global.cg.b32 %f3, [%rd3];
	// end inline asm
	add.f32 	%f19, %f18, %f3;
	add.s64 	%rd4, %rd2, 4096;
	// begin inline asm
	ld.global.cg.b32 %f4, [%rd4];
	// end inline asm
	add.f32 	%f20, %f19, %f4;
	add.s64 	%rd5, %rd2, 6144;
	// begin inline asm
	ld.global.cg.b32 %f5, [%rd5];
	// end inline asm
	add.f32 	%f21, %f20, %f5;
	add.s64 	%rd6, %rd2, 8192;
	// begin inline asm
	ld.global.cg.b32 %f6, [%rd6];
	// end inline asm
	add.f32 	%f22, %f21, %f6;
	add.s64 	%rd7, %rd2, 10240;
	// begin inline asm
	ld.global.cg.b32 %f7, [%rd7];
	// end inline asm
	add.f32 	%f23, %f22, %f7;
	add.s64 	%rd8, %rd2, 12288;
	// begin inline asm
	ld.global.cg.b32 %f8, [%rd8];
	// end inline asm
	add.f32 	%f24, %f23, %f8;
	add.s64 	%rd9, %rd2, 14336;
	// begin inline asm
	ld.global.cg.b32 %f9, [%rd9];
	// end inline asm
	add.f32 	%f25, %f24, %f9;
	add.s64 	%rd10, %rd2, 16384;
	// begin inline asm
	ld.global.cg.b32 %f10, [%rd10];
	// end inline asm
	add.f32 	%f26, %f25, %f10;
	add.s64 	%rd11, %rd2, 18432;
	// begin inline asm
	ld.global.cg.b32 %f11, [%rd11];
	// end inline asm
	add.f32 	%f27, %f26, %f11;
	add.s64 	%rd12, %rd2, 20480;
	// begin inline asm
	ld.global.cg.b32 %f12, [%rd12];
	// end inline asm
	add.f32 	%f28, %f27, %f12;
	add.s64 	%rd13, %rd2, 22528;
	// begin inline asm
	ld.global.cg.b32 %f13, [%rd13];
	// end inline asm
	add.f32 	%f29, %f28, %f13;
	add.s64 	%rd14, %rd2, 24576;
	// begin inline asm
	ld.global.cg.b32 %f14, [%rd14];
	// end inline asm
	add.f32 	%f30, %f29, %f14;
	add.s64 	%rd15, %rd2, 26624;
	// begin inline asm
	ld.global.cg.b32 %f15, [%rd15];
	// end inline asm
	add.f32 	%f31, %f30, %f15;
	add.s64 	%rd16, %rd2, 28672;
	// begin inline asm
	ld.global.cg.b32 %f16, [%rd16];
	// end inline asm
	add.f32 	%f32, %f31, %f16;
	add.s64 	%rd17, %rd2, 30720;
	// begin inline asm
	ld.global.cg.b32 %f17, [%rd17];
	// end inline asm
	add.f32 	%f1, %f32, %f17;
	setp.eq.f32 	%p1, %f1, 0f00000000;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd21, %rd1;
	st.global.f32 	[%rd21], %f1;

$L__BB0_2:
	ret;

}


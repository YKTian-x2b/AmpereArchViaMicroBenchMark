//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z17l2_latency_kernelILi10EEvPKjPjS2_

.visible .entry _Z17l2_latency_kernelILi10EEvPKjPjS2_(
	.param .u64 _Z17l2_latency_kernelILi10EEvPKjPjS2__param_0,
	.param .u64 _Z17l2_latency_kernelILi10EEvPKjPjS2__param_1,
	.param .u64 _Z17l2_latency_kernelILi10EEvPKjPjS2__param_2
)
.maxntid 32, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd13, [_Z17l2_latency_kernelILi10EEvPKjPjS2__param_0];
	ld.param.u64 	%rd1, [_Z17l2_latency_kernelILi10EEvPKjPjS2__param_1];
	ld.param.u64 	%rd14, [_Z17l2_latency_kernelILi10EEvPKjPjS2__param_2];
	mov.u32 	%r14, %tid.x;
	mul.wide.u32 	%rd15, %r14, 4;
	add.s64 	%rd2, %rd13, %rd15;
	// begin inline asm
	ld.global.cg.b32 %r1, [%rd2];

	// end inline asm
	cvt.u64.u32 	%rd16, %r1;
	add.s64 	%rd3, %rd2, %rd16;
	// begin inline asm
	bar.sync 0;
mov.u32 %r2, %clock;

	// end inline asm
	// begin inline asm
	ld.global.cg.b32 %r3, [%rd3];

	// end inline asm
	cvt.u64.u32 	%rd17, %r3;
	add.s64 	%rd4, %rd3, %rd17;
	// begin inline asm
	ld.global.cg.b32 %r4, [%rd4];

	// end inline asm
	cvt.u64.u32 	%rd18, %r4;
	add.s64 	%rd5, %rd4, %rd18;
	// begin inline asm
	ld.global.cg.b32 %r5, [%rd5];

	// end inline asm
	cvt.u64.u32 	%rd19, %r5;
	add.s64 	%rd6, %rd5, %rd19;
	// begin inline asm
	ld.global.cg.b32 %r6, [%rd6];

	// end inline asm
	cvt.u64.u32 	%rd20, %r6;
	add.s64 	%rd7, %rd6, %rd20;
	// begin inline asm
	ld.global.cg.b32 %r7, [%rd7];

	// end inline asm
	cvt.u64.u32 	%rd21, %r7;
	add.s64 	%rd8, %rd7, %rd21;
	// begin inline asm
	ld.global.cg.b32 %r8, [%rd8];

	// end inline asm
	cvt.u64.u32 	%rd22, %r8;
	add.s64 	%rd9, %rd8, %rd22;
	// begin inline asm
	ld.global.cg.b32 %r9, [%rd9];

	// end inline asm
	cvt.u64.u32 	%rd23, %r9;
	add.s64 	%rd10, %rd9, %rd23;
	// begin inline asm
	ld.global.cg.b32 %r10, [%rd10];

	// end inline asm
	cvt.u64.u32 	%rd24, %r10;
	add.s64 	%rd11, %rd10, %rd24;
	// begin inline asm
	ld.global.cg.b32 %r11, [%rd11];

	// end inline asm
	cvt.u64.u32 	%rd25, %r11;
	add.s64 	%rd12, %rd11, %rd25;
	// begin inline asm
	ld.global.cg.b32 %r12, [%rd12];

	// end inline asm
	// begin inline asm
	bar.sync 0;
mov.u32 %r13, %clock;

	// end inline asm
	sub.s32 	%r15, %r13, %r2;
	cvta.to.global.u64 	%rd26, %rd14;
	add.s64 	%rd27, %rd26, %rd15;
	st.global.u32 	[%rd27], %r15;
	setp.ne.s32 	%p1, %r12, 0;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd28, %rd1;
	mov.u32 	%r16, 0;
	st.global.u32 	[%rd28], %r16;

$L__BB0_2:
	ret;

}


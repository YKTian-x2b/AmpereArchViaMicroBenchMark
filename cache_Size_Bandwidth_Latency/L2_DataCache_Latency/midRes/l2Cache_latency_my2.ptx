//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z27l2Cache_latency_test_kernelPjS_PPvS1_

.visible .entry _Z27l2Cache_latency_test_kernelPjS_PPvS1_(
	.param .u64 _Z27l2Cache_latency_test_kernelPjS_PPvS1__param_0,
	.param .u64 _Z27l2Cache_latency_test_kernelPjS_PPvS1__param_1,
	.param .u64 _Z27l2Cache_latency_test_kernelPjS_PPvS1__param_2,
	.param .u64 _Z27l2Cache_latency_test_kernelPjS_PPvS1__param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<115>;


	ld.param.u64 	%rd104, [_Z27l2Cache_latency_test_kernelPjS_PPvS1__param_0];
	ld.param.u64 	%rd105, [_Z27l2Cache_latency_test_kernelPjS_PPvS1__param_1];
	ld.param.u64 	%rd1, [_Z27l2Cache_latency_test_kernelPjS_PPvS1__param_2];
	ld.param.u64 	%rd106, [_Z27l2Cache_latency_test_kernelPjS_PPvS1__param_3];
	mov.u32 	%r3, %tid.x;
	mul.wide.s32 	%rd107, %r3, 8;
	add.s64 	%rd4, %rd106, %rd107;
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	bar.sync 0;
	// end inline asm
	// begin inline asm
	mov.u32 %r1, %clock;
	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	ld.global.cg.b64 %rd4, [%rd4];

	// end inline asm
	// begin inline asm
	mov.u32 %r2, %clock;
	// end inline asm
	cvta.to.global.u64 	%rd108, %rd104;
	mul.wide.s32 	%rd109, %r3, 4;
	add.s64 	%rd110, %rd108, %rd109;
	cvta.to.global.u64 	%rd111, %rd105;
	add.s64 	%rd112, %rd111, %rd109;
	st.global.u32 	[%rd110], %r1;
	st.global.u32 	[%rd112], %r2;
	setp.ne.s64 	%p1, %rd4, 0;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd113, %rd1;
	mov.u64 	%rd114, 0;
	st.global.u64 	[%rd113], %rd114;

$L__BB0_2:
	ret;

}


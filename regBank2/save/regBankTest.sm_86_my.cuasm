// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM86 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM86)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          121 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x1b00 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x1880 		// section header offset, maybe updated by assembler
	.__elf_flags            0x560556 		// Flags, SM_86(0x56), COMPUTE_86(0x56) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            10 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x134 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*0050*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0058*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*0060*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0068*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[8] = b'.nv.info._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*006d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0075*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67
    /*007d*/ .byte 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73
    /*0085*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*008d*/ .byte 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66
    /*0095*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[9] = b'.nv.shared._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*009d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00a5*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72
    /*00ad*/ .byte 0x65, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74
    /*00b5*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00bd*/ .byte 0x65, 0x6c, 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69
    /*00c5*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*00cd*/ .byte 0x66, 0x00

    // .shstrtab[10] = b'.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00cf*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00d7*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00df*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*00e7*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*00ef*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*00f7*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*00ff*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[11] = b'.debug_frame\x00' 
    /*0104*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*010c*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[12] = b'.rel.debug_frame\x00' 
    /*0111*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0119*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*0121*/ .byte 0x00

    // .shstrtab[13] = b'.rela.debug_frame\x00' 
    /*0122*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*012a*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0132*/ .byte 0x65, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x174 	// maybe updated by assembler
	.__section_size         0x162 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67, 0x62
    /*0048*/ .byte 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0050*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34
    /*0058*/ .byte 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c
    /*0060*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[8] = b'.text._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0067*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*006f*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*0077*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*007f*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*0087*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*008f*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[9] = b'.nv.info._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0094*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*009c*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67
    /*00a4*/ .byte 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73
    /*00ac*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*00b4*/ .byte 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66
    /*00bc*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[10] = b'.nv.shared._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00c4*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00cc*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72
    /*00d4*/ .byte 0x65, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74
    /*00dc*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00e4*/ .byte 0x65, 0x6c, 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69
    /*00ec*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*00f4*/ .byte 0x66, 0x00

    // .strtab[11] = b'.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00f6*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00fe*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0106*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*010e*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0116*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*011e*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0126*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[12] = b'_param\x00' 
    /*012b*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[13] = b'.debug_frame\x00' 
    /*0132*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*013a*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[14] = b'.rel.debug_frame\x00' 
    /*013f*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0147*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*014f*/ .byte 0x00

    // .strtab[15] = b'.rela.debug_frame\x00' 
    /*0150*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*0158*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0160*/ .byte 0x65, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2d8 	// maybe updated by assembler
	.__section_size         0x78 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x4
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 103, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x67, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 246, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 8, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xf6, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".debug_frame": Container({'st_name': 306, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0x32, 0x01, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] "_Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 4736})
    /*0060*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x09, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x80, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0x104 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x350 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z19regbank_test_kernel4int2i6float4Pf
          /*004c*/ 	.byte	0x80, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x1c, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0x3c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3c0 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0008*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*002c*/ 	.word	0x00000000
  .L_7:
  
  
// --------------------- .nv.info._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.nv.info._Z19regbank_test_kernel4int2i6float4Pf,"",@"SHT_CUDA_INFO"
	.__section_name         0x6d 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3f0 	// maybe updated by assembler
	.__section_size         0x6c 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_9 - .L_8)
  .L_8:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_9:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0010*/ 	.word	index@(.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0028
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_11:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0028
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_13 - .L_12)
  .L_12:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0003
          /*0026*/ 	.short	0x0020
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_13:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0002
          /*0036*/ 	.short	0x0010
          /*0038*/ 	.byte	0x00, 0xf0, 0x41, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_15:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0001
          /*0046*/ 	.short	0x0008
          /*0048*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_17:
          /*004c*/ 	.byte	0x04, 0x17
          /*004e*/ 	.short	(.L_19 - .L_18)
  .L_18:
          /*0050*/ 	.word	0x00000000
          /*0054*/ 	.short	0x0000
          /*0056*/ 	.short	0x0000
          /*0058*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_19:
          /*005c*/ 	.byte	0x03, 0x1b
          /*005e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0060*/ 	.byte	0x04, 0x1c
          /*0062*/ 	.short	(.L_21 - .L_20)
  
  
  	//   ....[0]....
  .L_20:
          /*0064*/ 	.word	0x000010f0
  
  
  	//   ....[1]....
          /*0068*/ 	.word	0x00001170
  .L_21:
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x111 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x460 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z19regbank_test_kernel4int2i6float4Pf, Container({'r_offset': 68, 'r_info': 17179869186, 'r_info_sym': 4, 'r_info_type': 2})

// --------------------- .nv.constant0._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf,"a",@progbits
	.__section_name         0xcf 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x470 	// maybe updated by assembler
	.__section_size         0x188 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x9
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z19regbank_test_kernel4int2i6float4Pf:
  	.zero		392
  
  
// --------------------- .text._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.text._Z19regbank_test_kernel4int2i6float4Pf,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0x600 	// maybe updated by assembler
	.__section_size         0x1280 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x8000004
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=8"
  	.align	128
          .global         _Z19regbank_test_kernel4int2i6float4Pf
          .type           _Z19regbank_test_kernel4int2i6float4Pf,@function
          .size           _Z19regbank_test_kernel4int2i6float4Pf,(.L_x_3 - _Z19regbank_test_kernel4int2i6float4Pf)
          .other          _Z19regbank_test_kernel4int2i6float4Pf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z19regbank_test_kernel4int2i6float4Pf:
  .text._Z19regbank_test_kernel4int2i6float4Pf:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R0, SR_TID.X ;
      [B------:R-:W-:-:S02]         /*0020*/                   MOV R2, c[0x0][0x168] ;
      [B------:R-:W-:-:S01]         /*0030*/                   MOV R5, c[0x0][0x170] ;
      [B------:R-:W0:-:S01]         /*0040*/                   S2R R3, SR_CTAID.X ;
      [B------:R-:W-:-:S02]         /*0050*/                   ISETP.GE.AND P1, PT, R2, 0x1, PT ;
      [B0-----:R-:W-:Y:S11]         /*0060*/                   LOP3.LUT P0, RZ, R3, 0x1f, R0, 0xf8, !PT ;
              // @CUASM_INSERT_MARKER_POS.INIT
        [B------:R-:W-:-:S01]  MOV R5, RZ ; 
        [B------:R-:W-:-:S01]  MOV R8, 0x3f800000 ; 
        [B------:R-:W-:-:S01]  MOV R9, 0x3f800000 ; 
        [B------:R-:W-:-:S01]  MOV R10, 0x3f800000 ; 
        [B------:R-:W-:-:S01]  MOV R11, 0x3f800000 ; 
        [B------:R-:W-:-:S01]  MOV R12, 0x3f800000 ; 
        [B------:R-:W-:-:S01]  MOV R13, 0x3f800000 ; 
//        [B------:R-:W-:-:S01]  MOV R14, 0x3f800000 ; 
//        [B------:R-:W-:-:S01]  MOV R15, 0x3f800000 ; 
//        [B------:R-:W-:-:S01]  MOV R16, 0x3f800000 ; 

      [B------:R-:W-:-:S05]         /*0070*/              @!P1 BRA `(.L_x_0) ;
      [B------:R-:W-:Y:S02]         /*0080*/                   MOV R3, RZ ;
  .L_x_1:
      [B------:R-:W-:-:S02]         /*0090*/                   MOV R2, c[0x0][0x178] ;
      [B------:R-:W-:Y:S03]         /*00a0*/                   IADD3 R3, R3, 0x1, RZ ;
      [B------:R-:W-:-:S01]         /*00b0*/                   FFMA R5, R5, R2, c[0x0][0x174] ;
      [B------:R-:W-:Y:S03]         /*00c0*/                   ISETP.GE.AND P1, PT, R3, c[0x0][0x168], PT ;
      // @CUASM_INSERT_MARKER_POS.WORK_1
      [B------:R-:W-:-:S01]  FFMA R5, R9, R10, R5; 
      [B------:R-:W-:-:S01]  FFMA R12, R9, R10, R11; 
      [B------:R-:W-:-:S01]  FFMA R13, R9, R10, R11; 

      [B------:R-:W-:-:S01]         /*10c0*/               @P1 CALL.REL.NOINC `(.L_x_0) ;
      [B------:R-:W-:-:S05]         /*10d0*/                   BRA `(.L_x_1) ;
  .L_x_0:
      [B------:R-:W-:-:S06]         /*10e0*/                   BAR.SYNC 0x0 ;
      [B------:R-:W-:-:S05]         /*10f0*/               @P0 EXIT ;
      [B------:R-:W-:-:S01]         /*1100*/                   SHF.R.S32.HI R3, RZ, 0x1f, R0 ;
      [B------:R-:W-:-:S01]         /*1110*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R-:W-:-:S02]         /*1120*/                   MOV R2, 0x4 ;
      [B------:R-:W-:Y:S04]         /*1130*/                   LEA.HI R3, R3, R0, RZ, 0x5 ;
      [B------:R-:W-:Y:S05]         /*1140*/                   SHF.R.S32.HI R3, RZ, 0x5, R3 ;
      [B------:R-:W-:Y:S05]         /*1150*/                   IMAD.WIDE R2, R3, R2, c[0x0][0x180] ;
      [B------:R-:W-:-:S01]         /*1160*/                   STG.E desc[UR4][R2.64], R5 ;
      [B------:R-:W-:-:S05]         /*1170*/                   EXIT ;
  .L_x_2:
      [B------:R-:W-:Y:S00]         /*1180*/                   BRA `(.L_x_2);
      [B------:R-:W-:Y:S00]         /*1190*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*11f0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1200*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1210*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1220*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1230*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1240*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1250*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1260*/                   NOP;
      [B------:R-:W-:Y:S00]         /*1270*/                   NOP;
  .L_x_3:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0x1b00   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x470   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x1410   		// file size, maybe updated by assembler 
  .__segment_memsz   0x1410   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z19regbank_test_kernel4int2i6float4Pf"  		// first section in this segment 
  .__segment_endsection      ".text._Z19regbank_test_kernel4int2i6float4Pf"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x1b00   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


